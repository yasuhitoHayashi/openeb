// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ll_biases_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ll_5fbiases_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ll_5fbiases_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ll_5fbiases_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ll_5fbiases_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ll_5fbiases_5fstate_2eproto;
namespace DeviceSerialization {
class LLBiasesState;
struct LLBiasesStateDefaultTypeInternal;
extern LLBiasesStateDefaultTypeInternal _LLBiasesState_default_instance_;
class LLBiasesState_Bias;
struct LLBiasesState_BiasDefaultTypeInternal;
extern LLBiasesState_BiasDefaultTypeInternal _LLBiasesState_Bias_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::LLBiasesState* Arena::CreateMaybeMessage<::DeviceSerialization::LLBiasesState>(Arena*);
template<> ::DeviceSerialization::LLBiasesState_Bias* Arena::CreateMaybeMessage<::DeviceSerialization::LLBiasesState_Bias>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

// ===================================================================

class LLBiasesState_Bias final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.LLBiasesState.Bias) */ {
 public:
  inline LLBiasesState_Bias() : LLBiasesState_Bias(nullptr) {}
  ~LLBiasesState_Bias() override;
  explicit PROTOBUF_CONSTEXPR LLBiasesState_Bias(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LLBiasesState_Bias(const LLBiasesState_Bias& from);
  LLBiasesState_Bias(LLBiasesState_Bias&& from) noexcept
    : LLBiasesState_Bias() {
    *this = ::std::move(from);
  }

  inline LLBiasesState_Bias& operator=(const LLBiasesState_Bias& from) {
    CopyFrom(from);
    return *this;
  }
  inline LLBiasesState_Bias& operator=(LLBiasesState_Bias&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LLBiasesState_Bias& default_instance() {
    return *internal_default_instance();
  }
  static inline const LLBiasesState_Bias* internal_default_instance() {
    return reinterpret_cast<const LLBiasesState_Bias*>(
               &_LLBiasesState_Bias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LLBiasesState_Bias& a, LLBiasesState_Bias& b) {
    a.Swap(&b);
  }
  inline void Swap(LLBiasesState_Bias* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LLBiasesState_Bias* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LLBiasesState_Bias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LLBiasesState_Bias>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LLBiasesState_Bias& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LLBiasesState_Bias& from) {
    LLBiasesState_Bias::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LLBiasesState_Bias* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.LLBiasesState.Bias";
  }
  protected:
  explicit LLBiasesState_Bias(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // sint32 value = 2;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceSerialization.LLBiasesState.Bias)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ll_5fbiases_5fstate_2eproto;
};
// -------------------------------------------------------------------

class LLBiasesState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.LLBiasesState) */ {
 public:
  inline LLBiasesState() : LLBiasesState(nullptr) {}
  ~LLBiasesState() override;
  explicit PROTOBUF_CONSTEXPR LLBiasesState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LLBiasesState(const LLBiasesState& from);
  LLBiasesState(LLBiasesState&& from) noexcept
    : LLBiasesState() {
    *this = ::std::move(from);
  }

  inline LLBiasesState& operator=(const LLBiasesState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LLBiasesState& operator=(LLBiasesState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LLBiasesState& default_instance() {
    return *internal_default_instance();
  }
  static inline const LLBiasesState* internal_default_instance() {
    return reinterpret_cast<const LLBiasesState*>(
               &_LLBiasesState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LLBiasesState& a, LLBiasesState& b) {
    a.Swap(&b);
  }
  inline void Swap(LLBiasesState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LLBiasesState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LLBiasesState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LLBiasesState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LLBiasesState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LLBiasesState& from) {
    LLBiasesState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LLBiasesState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.LLBiasesState";
  }
  protected:
  explicit LLBiasesState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LLBiasesState_Bias Bias;

  // accessors -------------------------------------------------------

  enum : int {
    kBiasFieldNumber = 1,
  };
  // repeated .DeviceSerialization.LLBiasesState.Bias bias = 1;
  int bias_size() const;
  private:
  int _internal_bias_size() const;
  public:
  void clear_bias();
  ::DeviceSerialization::LLBiasesState_Bias* mutable_bias(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::LLBiasesState_Bias >*
      mutable_bias();
  private:
  const ::DeviceSerialization::LLBiasesState_Bias& _internal_bias(int index) const;
  ::DeviceSerialization::LLBiasesState_Bias* _internal_add_bias();
  public:
  const ::DeviceSerialization::LLBiasesState_Bias& bias(int index) const;
  ::DeviceSerialization::LLBiasesState_Bias* add_bias();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::LLBiasesState_Bias >&
      bias() const;

  // @@protoc_insertion_point(class_scope:DeviceSerialization.LLBiasesState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::LLBiasesState_Bias > bias_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ll_5fbiases_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LLBiasesState_Bias

// string name = 1;
inline void LLBiasesState_Bias::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LLBiasesState_Bias::name() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.LLBiasesState.Bias.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LLBiasesState_Bias::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceSerialization.LLBiasesState.Bias.name)
}
inline std::string* LLBiasesState_Bias::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.LLBiasesState.Bias.name)
  return _s;
}
inline const std::string& LLBiasesState_Bias::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LLBiasesState_Bias::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LLBiasesState_Bias::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LLBiasesState_Bias::release_name() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.LLBiasesState.Bias.name)
  return _impl_.name_.Release();
}
inline void LLBiasesState_Bias::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.LLBiasesState.Bias.name)
}

// sint32 value = 2;
inline void LLBiasesState_Bias::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t LLBiasesState_Bias::_internal_value() const {
  return _impl_.value_;
}
inline int32_t LLBiasesState_Bias::value() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.LLBiasesState.Bias.value)
  return _internal_value();
}
inline void LLBiasesState_Bias::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void LLBiasesState_Bias::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.LLBiasesState.Bias.value)
}

// -------------------------------------------------------------------

// LLBiasesState

// repeated .DeviceSerialization.LLBiasesState.Bias bias = 1;
inline int LLBiasesState::_internal_bias_size() const {
  return _impl_.bias_.size();
}
inline int LLBiasesState::bias_size() const {
  return _internal_bias_size();
}
inline void LLBiasesState::clear_bias() {
  _impl_.bias_.Clear();
}
inline ::DeviceSerialization::LLBiasesState_Bias* LLBiasesState::mutable_bias(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.LLBiasesState.bias)
  return _impl_.bias_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::LLBiasesState_Bias >*
LLBiasesState::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:DeviceSerialization.LLBiasesState.bias)
  return &_impl_.bias_;
}
inline const ::DeviceSerialization::LLBiasesState_Bias& LLBiasesState::_internal_bias(int index) const {
  return _impl_.bias_.Get(index);
}
inline const ::DeviceSerialization::LLBiasesState_Bias& LLBiasesState::bias(int index) const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.LLBiasesState.bias)
  return _internal_bias(index);
}
inline ::DeviceSerialization::LLBiasesState_Bias* LLBiasesState::_internal_add_bias() {
  return _impl_.bias_.Add();
}
inline ::DeviceSerialization::LLBiasesState_Bias* LLBiasesState::add_bias() {
  ::DeviceSerialization::LLBiasesState_Bias* _add = _internal_add_bias();
  // @@protoc_insertion_point(field_add:DeviceSerialization.LLBiasesState.bias)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::LLBiasesState_Bias >&
LLBiasesState::bias() const {
  // @@protoc_insertion_point(field_list:DeviceSerialization.LLBiasesState.bias)
  return _impl_.bias_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ll_5fbiases_5fstate_2eproto
