// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_synchronization_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_5fsynchronization_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camera_5fsynchronization_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camera_5fsynchronization_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_5fsynchronization_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camera_5fsynchronization_5fstate_2eproto;
namespace DeviceSerialization {
class CameraSynchronizationState;
struct CameraSynchronizationStateDefaultTypeInternal;
extern CameraSynchronizationStateDefaultTypeInternal _CameraSynchronizationState_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::CameraSynchronizationState* Arena::CreateMaybeMessage<::DeviceSerialization::CameraSynchronizationState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

enum CameraSynchronizationState_CameraSynchronizationMode : int {
  CameraSynchronizationState_CameraSynchronizationMode_MASTER = 0,
  CameraSynchronizationState_CameraSynchronizationMode_SLAVE = 1,
  CameraSynchronizationState_CameraSynchronizationMode_STANDALONE = 2,
  CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationState_CameraSynchronizationMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationState_CameraSynchronizationMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CameraSynchronizationState_CameraSynchronizationMode_IsValid(int value);
constexpr CameraSynchronizationState_CameraSynchronizationMode CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationMode_MIN = CameraSynchronizationState_CameraSynchronizationMode_MASTER;
constexpr CameraSynchronizationState_CameraSynchronizationMode CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationMode_MAX = CameraSynchronizationState_CameraSynchronizationMode_STANDALONE;
constexpr int CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationMode_ARRAYSIZE = CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraSynchronizationState_CameraSynchronizationMode_descriptor();
template<typename T>
inline const std::string& CameraSynchronizationState_CameraSynchronizationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraSynchronizationState_CameraSynchronizationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraSynchronizationState_CameraSynchronizationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraSynchronizationState_CameraSynchronizationMode_descriptor(), enum_t_value);
}
inline bool CameraSynchronizationState_CameraSynchronizationMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraSynchronizationState_CameraSynchronizationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraSynchronizationState_CameraSynchronizationMode>(
    CameraSynchronizationState_CameraSynchronizationMode_descriptor(), name, value);
}
// ===================================================================

class CameraSynchronizationState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.CameraSynchronizationState) */ {
 public:
  inline CameraSynchronizationState() : CameraSynchronizationState(nullptr) {}
  ~CameraSynchronizationState() override;
  explicit PROTOBUF_CONSTEXPR CameraSynchronizationState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraSynchronizationState(const CameraSynchronizationState& from);
  CameraSynchronizationState(CameraSynchronizationState&& from) noexcept
    : CameraSynchronizationState() {
    *this = ::std::move(from);
  }

  inline CameraSynchronizationState& operator=(const CameraSynchronizationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraSynchronizationState& operator=(CameraSynchronizationState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraSynchronizationState& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalSyncModeCase {
    kSyncMode = 1,
    OPTIONAL_SYNC_MODE_NOT_SET = 0,
  };

  static inline const CameraSynchronizationState* internal_default_instance() {
    return reinterpret_cast<const CameraSynchronizationState*>(
               &_CameraSynchronizationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraSynchronizationState& a, CameraSynchronizationState& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraSynchronizationState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraSynchronizationState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraSynchronizationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraSynchronizationState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraSynchronizationState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraSynchronizationState& from) {
    CameraSynchronizationState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraSynchronizationState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.CameraSynchronizationState";
  }
  protected:
  explicit CameraSynchronizationState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraSynchronizationState_CameraSynchronizationMode CameraSynchronizationMode;
  static constexpr CameraSynchronizationMode MASTER =
    CameraSynchronizationState_CameraSynchronizationMode_MASTER;
  static constexpr CameraSynchronizationMode SLAVE =
    CameraSynchronizationState_CameraSynchronizationMode_SLAVE;
  static constexpr CameraSynchronizationMode STANDALONE =
    CameraSynchronizationState_CameraSynchronizationMode_STANDALONE;
  static inline bool CameraSynchronizationMode_IsValid(int value) {
    return CameraSynchronizationState_CameraSynchronizationMode_IsValid(value);
  }
  static constexpr CameraSynchronizationMode CameraSynchronizationMode_MIN =
    CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationMode_MIN;
  static constexpr CameraSynchronizationMode CameraSynchronizationMode_MAX =
    CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationMode_MAX;
  static constexpr int CameraSynchronizationMode_ARRAYSIZE =
    CameraSynchronizationState_CameraSynchronizationMode_CameraSynchronizationMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CameraSynchronizationMode_descriptor() {
    return CameraSynchronizationState_CameraSynchronizationMode_descriptor();
  }
  template<typename T>
  static inline const std::string& CameraSynchronizationMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CameraSynchronizationMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CameraSynchronizationMode_Name.");
    return CameraSynchronizationState_CameraSynchronizationMode_Name(enum_t_value);
  }
  static inline bool CameraSynchronizationMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CameraSynchronizationMode* value) {
    return CameraSynchronizationState_CameraSynchronizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSyncModeFieldNumber = 1,
  };
  // .DeviceSerialization.CameraSynchronizationState.CameraSynchronizationMode sync_mode = 1;
  bool has_sync_mode() const;
  private:
  bool _internal_has_sync_mode() const;
  public:
  void clear_sync_mode();
  ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode sync_mode() const;
  void set_sync_mode(::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode value);
  private:
  ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode _internal_sync_mode() const;
  void _internal_set_sync_mode(::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode value);
  public:

  void clear_optional_sync_mode();
  OptionalSyncModeCase optional_sync_mode_case() const;
  // @@protoc_insertion_point(class_scope:DeviceSerialization.CameraSynchronizationState)
 private:
  class _Internal;
  void set_has_sync_mode();

  inline bool has_optional_sync_mode() const;
  inline void clear_has_optional_sync_mode();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionalSyncModeUnion {
      constexpr OptionalSyncModeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int sync_mode_;
    } optional_sync_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fsynchronization_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraSynchronizationState

// .DeviceSerialization.CameraSynchronizationState.CameraSynchronizationMode sync_mode = 1;
inline bool CameraSynchronizationState::_internal_has_sync_mode() const {
  return optional_sync_mode_case() == kSyncMode;
}
inline bool CameraSynchronizationState::has_sync_mode() const {
  return _internal_has_sync_mode();
}
inline void CameraSynchronizationState::set_has_sync_mode() {
  _impl_._oneof_case_[0] = kSyncMode;
}
inline void CameraSynchronizationState::clear_sync_mode() {
  if (_internal_has_sync_mode()) {
    _impl_.optional_sync_mode_.sync_mode_ = 0;
    clear_has_optional_sync_mode();
  }
}
inline ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode CameraSynchronizationState::_internal_sync_mode() const {
  if (_internal_has_sync_mode()) {
    return static_cast< ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode >(_impl_.optional_sync_mode_.sync_mode_);
  }
  return static_cast< ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode >(0);
}
inline ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode CameraSynchronizationState::sync_mode() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.CameraSynchronizationState.sync_mode)
  return _internal_sync_mode();
}
inline void CameraSynchronizationState::_internal_set_sync_mode(::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode value) {
  if (!_internal_has_sync_mode()) {
    clear_optional_sync_mode();
    set_has_sync_mode();
  }
  _impl_.optional_sync_mode_.sync_mode_ = value;
}
inline void CameraSynchronizationState::set_sync_mode(::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode value) {
  _internal_set_sync_mode(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.CameraSynchronizationState.sync_mode)
}

inline bool CameraSynchronizationState::has_optional_sync_mode() const {
  return optional_sync_mode_case() != OPTIONAL_SYNC_MODE_NOT_SET;
}
inline void CameraSynchronizationState::clear_has_optional_sync_mode() {
  _impl_._oneof_case_[0] = OPTIONAL_SYNC_MODE_NOT_SET;
}
inline CameraSynchronizationState::OptionalSyncModeCase CameraSynchronizationState::optional_sync_mode_case() const {
  return CameraSynchronizationState::OptionalSyncModeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode>() {
  return ::DeviceSerialization::CameraSynchronizationState_CameraSynchronizationMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camera_5fsynchronization_5fstate_2eproto
