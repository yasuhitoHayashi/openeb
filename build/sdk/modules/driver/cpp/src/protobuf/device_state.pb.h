// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_device_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "antiflicker_state.pb.h"
#include "camera_synchronization_state.pb.h"
#include "digital_crop_state.pb.h"
#include "digital_event_mask_state.pb.h"
#include "event_rate_control_state.pb.h"
#include "event_rate_noise_filter_state.pb.h"
#include "event_trail_filter_state.pb.h"
#include "hw_register_state.pb.h"
#include "ll_biases_state.pb.h"
#include "region_of_interest_state.pb.h"
#include "trigger_in_state.pb.h"
#include "trigger_out_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_device_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_device_5fstate_2eproto;
namespace DeviceSerialization {
class DeviceState;
struct DeviceStateDefaultTypeInternal;
extern DeviceStateDefaultTypeInternal _DeviceState_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::DeviceState* Arena::CreateMaybeMessage<::DeviceSerialization::DeviceState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

// ===================================================================

class DeviceState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.DeviceState) */ {
 public:
  inline DeviceState() : DeviceState(nullptr) {}
  ~DeviceState() override;
  explicit PROTOBUF_CONSTEXPR DeviceState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceState(const DeviceState& from);
  DeviceState(DeviceState&& from) noexcept
    : DeviceState() {
    *this = ::std::move(from);
  }

  inline DeviceState& operator=(const DeviceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceState& operator=(DeviceState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceState* internal_default_instance() {
    return reinterpret_cast<const DeviceState*>(
               &_DeviceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceState& a, DeviceState& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceState& from) {
    DeviceState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.DeviceState";
  }
  protected:
  explicit DeviceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfkStateFieldNumber = 1,
    kCamSyncStateFieldNumber = 2,
    kDigitalCropStateFieldNumber = 3,
    kDigitalEventMaskStateFieldNumber = 4,
    kEventRateControlStateFieldNumber = 5,
    kEventRateNoiseFilterStateFieldNumber = 6,
    kEventTrailFilterStateFieldNumber = 7,
    kHwRegisterStateFieldNumber = 8,
    kLlBiasesStateFieldNumber = 9,
    kRoiStateFieldNumber = 10,
    kTriggerInStateFieldNumber = 11,
    kTriggerOutStateFieldNumber = 12,
  };
  // .DeviceSerialization.AntiflickerState afk_state = 1;
  bool has_afk_state() const;
  private:
  bool _internal_has_afk_state() const;
  public:
  void clear_afk_state();
  const ::DeviceSerialization::AntiflickerState& afk_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::AntiflickerState* release_afk_state();
  ::DeviceSerialization::AntiflickerState* mutable_afk_state();
  void set_allocated_afk_state(::DeviceSerialization::AntiflickerState* afk_state);
  private:
  const ::DeviceSerialization::AntiflickerState& _internal_afk_state() const;
  ::DeviceSerialization::AntiflickerState* _internal_mutable_afk_state();
  public:
  void unsafe_arena_set_allocated_afk_state(
      ::DeviceSerialization::AntiflickerState* afk_state);
  ::DeviceSerialization::AntiflickerState* unsafe_arena_release_afk_state();

  // .DeviceSerialization.CameraSynchronizationState cam_sync_state = 2;
  bool has_cam_sync_state() const;
  private:
  bool _internal_has_cam_sync_state() const;
  public:
  void clear_cam_sync_state();
  const ::DeviceSerialization::CameraSynchronizationState& cam_sync_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::CameraSynchronizationState* release_cam_sync_state();
  ::DeviceSerialization::CameraSynchronizationState* mutable_cam_sync_state();
  void set_allocated_cam_sync_state(::DeviceSerialization::CameraSynchronizationState* cam_sync_state);
  private:
  const ::DeviceSerialization::CameraSynchronizationState& _internal_cam_sync_state() const;
  ::DeviceSerialization::CameraSynchronizationState* _internal_mutable_cam_sync_state();
  public:
  void unsafe_arena_set_allocated_cam_sync_state(
      ::DeviceSerialization::CameraSynchronizationState* cam_sync_state);
  ::DeviceSerialization::CameraSynchronizationState* unsafe_arena_release_cam_sync_state();

  // .DeviceSerialization.DigitalCropState digital_crop_state = 3;
  bool has_digital_crop_state() const;
  private:
  bool _internal_has_digital_crop_state() const;
  public:
  void clear_digital_crop_state();
  const ::DeviceSerialization::DigitalCropState& digital_crop_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::DigitalCropState* release_digital_crop_state();
  ::DeviceSerialization::DigitalCropState* mutable_digital_crop_state();
  void set_allocated_digital_crop_state(::DeviceSerialization::DigitalCropState* digital_crop_state);
  private:
  const ::DeviceSerialization::DigitalCropState& _internal_digital_crop_state() const;
  ::DeviceSerialization::DigitalCropState* _internal_mutable_digital_crop_state();
  public:
  void unsafe_arena_set_allocated_digital_crop_state(
      ::DeviceSerialization::DigitalCropState* digital_crop_state);
  ::DeviceSerialization::DigitalCropState* unsafe_arena_release_digital_crop_state();

  // .DeviceSerialization.DigitalEventMaskState digital_event_mask_state = 4;
  bool has_digital_event_mask_state() const;
  private:
  bool _internal_has_digital_event_mask_state() const;
  public:
  void clear_digital_event_mask_state();
  const ::DeviceSerialization::DigitalEventMaskState& digital_event_mask_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::DigitalEventMaskState* release_digital_event_mask_state();
  ::DeviceSerialization::DigitalEventMaskState* mutable_digital_event_mask_state();
  void set_allocated_digital_event_mask_state(::DeviceSerialization::DigitalEventMaskState* digital_event_mask_state);
  private:
  const ::DeviceSerialization::DigitalEventMaskState& _internal_digital_event_mask_state() const;
  ::DeviceSerialization::DigitalEventMaskState* _internal_mutable_digital_event_mask_state();
  public:
  void unsafe_arena_set_allocated_digital_event_mask_state(
      ::DeviceSerialization::DigitalEventMaskState* digital_event_mask_state);
  ::DeviceSerialization::DigitalEventMaskState* unsafe_arena_release_digital_event_mask_state();

  // .DeviceSerialization.EventRateControlState event_rate_control_state = 5;
  bool has_event_rate_control_state() const;
  private:
  bool _internal_has_event_rate_control_state() const;
  public:
  void clear_event_rate_control_state();
  const ::DeviceSerialization::EventRateControlState& event_rate_control_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::EventRateControlState* release_event_rate_control_state();
  ::DeviceSerialization::EventRateControlState* mutable_event_rate_control_state();
  void set_allocated_event_rate_control_state(::DeviceSerialization::EventRateControlState* event_rate_control_state);
  private:
  const ::DeviceSerialization::EventRateControlState& _internal_event_rate_control_state() const;
  ::DeviceSerialization::EventRateControlState* _internal_mutable_event_rate_control_state();
  public:
  void unsafe_arena_set_allocated_event_rate_control_state(
      ::DeviceSerialization::EventRateControlState* event_rate_control_state);
  ::DeviceSerialization::EventRateControlState* unsafe_arena_release_event_rate_control_state();

  // .DeviceSerialization.EventRateNoiseFilterState event_rate_noise_filter_state = 6;
  bool has_event_rate_noise_filter_state() const;
  private:
  bool _internal_has_event_rate_noise_filter_state() const;
  public:
  void clear_event_rate_noise_filter_state();
  const ::DeviceSerialization::EventRateNoiseFilterState& event_rate_noise_filter_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::EventRateNoiseFilterState* release_event_rate_noise_filter_state();
  ::DeviceSerialization::EventRateNoiseFilterState* mutable_event_rate_noise_filter_state();
  void set_allocated_event_rate_noise_filter_state(::DeviceSerialization::EventRateNoiseFilterState* event_rate_noise_filter_state);
  private:
  const ::DeviceSerialization::EventRateNoiseFilterState& _internal_event_rate_noise_filter_state() const;
  ::DeviceSerialization::EventRateNoiseFilterState* _internal_mutable_event_rate_noise_filter_state();
  public:
  void unsafe_arena_set_allocated_event_rate_noise_filter_state(
      ::DeviceSerialization::EventRateNoiseFilterState* event_rate_noise_filter_state);
  ::DeviceSerialization::EventRateNoiseFilterState* unsafe_arena_release_event_rate_noise_filter_state();

  // .DeviceSerialization.EventTrailFilterState event_trail_filter_state = 7;
  bool has_event_trail_filter_state() const;
  private:
  bool _internal_has_event_trail_filter_state() const;
  public:
  void clear_event_trail_filter_state();
  const ::DeviceSerialization::EventTrailFilterState& event_trail_filter_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::EventTrailFilterState* release_event_trail_filter_state();
  ::DeviceSerialization::EventTrailFilterState* mutable_event_trail_filter_state();
  void set_allocated_event_trail_filter_state(::DeviceSerialization::EventTrailFilterState* event_trail_filter_state);
  private:
  const ::DeviceSerialization::EventTrailFilterState& _internal_event_trail_filter_state() const;
  ::DeviceSerialization::EventTrailFilterState* _internal_mutable_event_trail_filter_state();
  public:
  void unsafe_arena_set_allocated_event_trail_filter_state(
      ::DeviceSerialization::EventTrailFilterState* event_trail_filter_state);
  ::DeviceSerialization::EventTrailFilterState* unsafe_arena_release_event_trail_filter_state();

  // .DeviceSerialization.HWRegisterState hw_register_state = 8;
  bool has_hw_register_state() const;
  private:
  bool _internal_has_hw_register_state() const;
  public:
  void clear_hw_register_state();
  const ::DeviceSerialization::HWRegisterState& hw_register_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::HWRegisterState* release_hw_register_state();
  ::DeviceSerialization::HWRegisterState* mutable_hw_register_state();
  void set_allocated_hw_register_state(::DeviceSerialization::HWRegisterState* hw_register_state);
  private:
  const ::DeviceSerialization::HWRegisterState& _internal_hw_register_state() const;
  ::DeviceSerialization::HWRegisterState* _internal_mutable_hw_register_state();
  public:
  void unsafe_arena_set_allocated_hw_register_state(
      ::DeviceSerialization::HWRegisterState* hw_register_state);
  ::DeviceSerialization::HWRegisterState* unsafe_arena_release_hw_register_state();

  // .DeviceSerialization.LLBiasesState ll_biases_state = 9;
  bool has_ll_biases_state() const;
  private:
  bool _internal_has_ll_biases_state() const;
  public:
  void clear_ll_biases_state();
  const ::DeviceSerialization::LLBiasesState& ll_biases_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::LLBiasesState* release_ll_biases_state();
  ::DeviceSerialization::LLBiasesState* mutable_ll_biases_state();
  void set_allocated_ll_biases_state(::DeviceSerialization::LLBiasesState* ll_biases_state);
  private:
  const ::DeviceSerialization::LLBiasesState& _internal_ll_biases_state() const;
  ::DeviceSerialization::LLBiasesState* _internal_mutable_ll_biases_state();
  public:
  void unsafe_arena_set_allocated_ll_biases_state(
      ::DeviceSerialization::LLBiasesState* ll_biases_state);
  ::DeviceSerialization::LLBiasesState* unsafe_arena_release_ll_biases_state();

  // .DeviceSerialization.RegionOfInterestState roi_state = 10;
  bool has_roi_state() const;
  private:
  bool _internal_has_roi_state() const;
  public:
  void clear_roi_state();
  const ::DeviceSerialization::RegionOfInterestState& roi_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::RegionOfInterestState* release_roi_state();
  ::DeviceSerialization::RegionOfInterestState* mutable_roi_state();
  void set_allocated_roi_state(::DeviceSerialization::RegionOfInterestState* roi_state);
  private:
  const ::DeviceSerialization::RegionOfInterestState& _internal_roi_state() const;
  ::DeviceSerialization::RegionOfInterestState* _internal_mutable_roi_state();
  public:
  void unsafe_arena_set_allocated_roi_state(
      ::DeviceSerialization::RegionOfInterestState* roi_state);
  ::DeviceSerialization::RegionOfInterestState* unsafe_arena_release_roi_state();

  // .DeviceSerialization.TriggerInState trigger_in_state = 11;
  bool has_trigger_in_state() const;
  private:
  bool _internal_has_trigger_in_state() const;
  public:
  void clear_trigger_in_state();
  const ::DeviceSerialization::TriggerInState& trigger_in_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::TriggerInState* release_trigger_in_state();
  ::DeviceSerialization::TriggerInState* mutable_trigger_in_state();
  void set_allocated_trigger_in_state(::DeviceSerialization::TriggerInState* trigger_in_state);
  private:
  const ::DeviceSerialization::TriggerInState& _internal_trigger_in_state() const;
  ::DeviceSerialization::TriggerInState* _internal_mutable_trigger_in_state();
  public:
  void unsafe_arena_set_allocated_trigger_in_state(
      ::DeviceSerialization::TriggerInState* trigger_in_state);
  ::DeviceSerialization::TriggerInState* unsafe_arena_release_trigger_in_state();

  // .DeviceSerialization.TriggerOutState trigger_out_state = 12;
  bool has_trigger_out_state() const;
  private:
  bool _internal_has_trigger_out_state() const;
  public:
  void clear_trigger_out_state();
  const ::DeviceSerialization::TriggerOutState& trigger_out_state() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::TriggerOutState* release_trigger_out_state();
  ::DeviceSerialization::TriggerOutState* mutable_trigger_out_state();
  void set_allocated_trigger_out_state(::DeviceSerialization::TriggerOutState* trigger_out_state);
  private:
  const ::DeviceSerialization::TriggerOutState& _internal_trigger_out_state() const;
  ::DeviceSerialization::TriggerOutState* _internal_mutable_trigger_out_state();
  public:
  void unsafe_arena_set_allocated_trigger_out_state(
      ::DeviceSerialization::TriggerOutState* trigger_out_state);
  ::DeviceSerialization::TriggerOutState* unsafe_arena_release_trigger_out_state();

  // @@protoc_insertion_point(class_scope:DeviceSerialization.DeviceState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DeviceSerialization::AntiflickerState* afk_state_;
    ::DeviceSerialization::CameraSynchronizationState* cam_sync_state_;
    ::DeviceSerialization::DigitalCropState* digital_crop_state_;
    ::DeviceSerialization::DigitalEventMaskState* digital_event_mask_state_;
    ::DeviceSerialization::EventRateControlState* event_rate_control_state_;
    ::DeviceSerialization::EventRateNoiseFilterState* event_rate_noise_filter_state_;
    ::DeviceSerialization::EventTrailFilterState* event_trail_filter_state_;
    ::DeviceSerialization::HWRegisterState* hw_register_state_;
    ::DeviceSerialization::LLBiasesState* ll_biases_state_;
    ::DeviceSerialization::RegionOfInterestState* roi_state_;
    ::DeviceSerialization::TriggerInState* trigger_in_state_;
    ::DeviceSerialization::TriggerOutState* trigger_out_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceState

// .DeviceSerialization.AntiflickerState afk_state = 1;
inline bool DeviceState::_internal_has_afk_state() const {
  return this != internal_default_instance() && _impl_.afk_state_ != nullptr;
}
inline bool DeviceState::has_afk_state() const {
  return _internal_has_afk_state();
}
inline const ::DeviceSerialization::AntiflickerState& DeviceState::_internal_afk_state() const {
  const ::DeviceSerialization::AntiflickerState* p = _impl_.afk_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::AntiflickerState&>(
      ::DeviceSerialization::_AntiflickerState_default_instance_);
}
inline const ::DeviceSerialization::AntiflickerState& DeviceState::afk_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.afk_state)
  return _internal_afk_state();
}
inline void DeviceState::unsafe_arena_set_allocated_afk_state(
    ::DeviceSerialization::AntiflickerState* afk_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.afk_state_);
  }
  _impl_.afk_state_ = afk_state;
  if (afk_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.afk_state)
}
inline ::DeviceSerialization::AntiflickerState* DeviceState::release_afk_state() {
  
  ::DeviceSerialization::AntiflickerState* temp = _impl_.afk_state_;
  _impl_.afk_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::AntiflickerState* DeviceState::unsafe_arena_release_afk_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.afk_state)
  
  ::DeviceSerialization::AntiflickerState* temp = _impl_.afk_state_;
  _impl_.afk_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::AntiflickerState* DeviceState::_internal_mutable_afk_state() {
  
  if (_impl_.afk_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::AntiflickerState>(GetArenaForAllocation());
    _impl_.afk_state_ = p;
  }
  return _impl_.afk_state_;
}
inline ::DeviceSerialization::AntiflickerState* DeviceState::mutable_afk_state() {
  ::DeviceSerialization::AntiflickerState* _msg = _internal_mutable_afk_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.afk_state)
  return _msg;
}
inline void DeviceState::set_allocated_afk_state(::DeviceSerialization::AntiflickerState* afk_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.afk_state_);
  }
  if (afk_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(afk_state));
    if (message_arena != submessage_arena) {
      afk_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, afk_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.afk_state_ = afk_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.afk_state)
}

// .DeviceSerialization.CameraSynchronizationState cam_sync_state = 2;
inline bool DeviceState::_internal_has_cam_sync_state() const {
  return this != internal_default_instance() && _impl_.cam_sync_state_ != nullptr;
}
inline bool DeviceState::has_cam_sync_state() const {
  return _internal_has_cam_sync_state();
}
inline const ::DeviceSerialization::CameraSynchronizationState& DeviceState::_internal_cam_sync_state() const {
  const ::DeviceSerialization::CameraSynchronizationState* p = _impl_.cam_sync_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::CameraSynchronizationState&>(
      ::DeviceSerialization::_CameraSynchronizationState_default_instance_);
}
inline const ::DeviceSerialization::CameraSynchronizationState& DeviceState::cam_sync_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.cam_sync_state)
  return _internal_cam_sync_state();
}
inline void DeviceState::unsafe_arena_set_allocated_cam_sync_state(
    ::DeviceSerialization::CameraSynchronizationState* cam_sync_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cam_sync_state_);
  }
  _impl_.cam_sync_state_ = cam_sync_state;
  if (cam_sync_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.cam_sync_state)
}
inline ::DeviceSerialization::CameraSynchronizationState* DeviceState::release_cam_sync_state() {
  
  ::DeviceSerialization::CameraSynchronizationState* temp = _impl_.cam_sync_state_;
  _impl_.cam_sync_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::CameraSynchronizationState* DeviceState::unsafe_arena_release_cam_sync_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.cam_sync_state)
  
  ::DeviceSerialization::CameraSynchronizationState* temp = _impl_.cam_sync_state_;
  _impl_.cam_sync_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::CameraSynchronizationState* DeviceState::_internal_mutable_cam_sync_state() {
  
  if (_impl_.cam_sync_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::CameraSynchronizationState>(GetArenaForAllocation());
    _impl_.cam_sync_state_ = p;
  }
  return _impl_.cam_sync_state_;
}
inline ::DeviceSerialization::CameraSynchronizationState* DeviceState::mutable_cam_sync_state() {
  ::DeviceSerialization::CameraSynchronizationState* _msg = _internal_mutable_cam_sync_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.cam_sync_state)
  return _msg;
}
inline void DeviceState::set_allocated_cam_sync_state(::DeviceSerialization::CameraSynchronizationState* cam_sync_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cam_sync_state_);
  }
  if (cam_sync_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cam_sync_state));
    if (message_arena != submessage_arena) {
      cam_sync_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam_sync_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cam_sync_state_ = cam_sync_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.cam_sync_state)
}

// .DeviceSerialization.DigitalCropState digital_crop_state = 3;
inline bool DeviceState::_internal_has_digital_crop_state() const {
  return this != internal_default_instance() && _impl_.digital_crop_state_ != nullptr;
}
inline bool DeviceState::has_digital_crop_state() const {
  return _internal_has_digital_crop_state();
}
inline const ::DeviceSerialization::DigitalCropState& DeviceState::_internal_digital_crop_state() const {
  const ::DeviceSerialization::DigitalCropState* p = _impl_.digital_crop_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::DigitalCropState&>(
      ::DeviceSerialization::_DigitalCropState_default_instance_);
}
inline const ::DeviceSerialization::DigitalCropState& DeviceState::digital_crop_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.digital_crop_state)
  return _internal_digital_crop_state();
}
inline void DeviceState::unsafe_arena_set_allocated_digital_crop_state(
    ::DeviceSerialization::DigitalCropState* digital_crop_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.digital_crop_state_);
  }
  _impl_.digital_crop_state_ = digital_crop_state;
  if (digital_crop_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.digital_crop_state)
}
inline ::DeviceSerialization::DigitalCropState* DeviceState::release_digital_crop_state() {
  
  ::DeviceSerialization::DigitalCropState* temp = _impl_.digital_crop_state_;
  _impl_.digital_crop_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::DigitalCropState* DeviceState::unsafe_arena_release_digital_crop_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.digital_crop_state)
  
  ::DeviceSerialization::DigitalCropState* temp = _impl_.digital_crop_state_;
  _impl_.digital_crop_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::DigitalCropState* DeviceState::_internal_mutable_digital_crop_state() {
  
  if (_impl_.digital_crop_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::DigitalCropState>(GetArenaForAllocation());
    _impl_.digital_crop_state_ = p;
  }
  return _impl_.digital_crop_state_;
}
inline ::DeviceSerialization::DigitalCropState* DeviceState::mutable_digital_crop_state() {
  ::DeviceSerialization::DigitalCropState* _msg = _internal_mutable_digital_crop_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.digital_crop_state)
  return _msg;
}
inline void DeviceState::set_allocated_digital_crop_state(::DeviceSerialization::DigitalCropState* digital_crop_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.digital_crop_state_);
  }
  if (digital_crop_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digital_crop_state));
    if (message_arena != submessage_arena) {
      digital_crop_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digital_crop_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.digital_crop_state_ = digital_crop_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.digital_crop_state)
}

// .DeviceSerialization.DigitalEventMaskState digital_event_mask_state = 4;
inline bool DeviceState::_internal_has_digital_event_mask_state() const {
  return this != internal_default_instance() && _impl_.digital_event_mask_state_ != nullptr;
}
inline bool DeviceState::has_digital_event_mask_state() const {
  return _internal_has_digital_event_mask_state();
}
inline const ::DeviceSerialization::DigitalEventMaskState& DeviceState::_internal_digital_event_mask_state() const {
  const ::DeviceSerialization::DigitalEventMaskState* p = _impl_.digital_event_mask_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::DigitalEventMaskState&>(
      ::DeviceSerialization::_DigitalEventMaskState_default_instance_);
}
inline const ::DeviceSerialization::DigitalEventMaskState& DeviceState::digital_event_mask_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.digital_event_mask_state)
  return _internal_digital_event_mask_state();
}
inline void DeviceState::unsafe_arena_set_allocated_digital_event_mask_state(
    ::DeviceSerialization::DigitalEventMaskState* digital_event_mask_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.digital_event_mask_state_);
  }
  _impl_.digital_event_mask_state_ = digital_event_mask_state;
  if (digital_event_mask_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.digital_event_mask_state)
}
inline ::DeviceSerialization::DigitalEventMaskState* DeviceState::release_digital_event_mask_state() {
  
  ::DeviceSerialization::DigitalEventMaskState* temp = _impl_.digital_event_mask_state_;
  _impl_.digital_event_mask_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::DigitalEventMaskState* DeviceState::unsafe_arena_release_digital_event_mask_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.digital_event_mask_state)
  
  ::DeviceSerialization::DigitalEventMaskState* temp = _impl_.digital_event_mask_state_;
  _impl_.digital_event_mask_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::DigitalEventMaskState* DeviceState::_internal_mutable_digital_event_mask_state() {
  
  if (_impl_.digital_event_mask_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::DigitalEventMaskState>(GetArenaForAllocation());
    _impl_.digital_event_mask_state_ = p;
  }
  return _impl_.digital_event_mask_state_;
}
inline ::DeviceSerialization::DigitalEventMaskState* DeviceState::mutable_digital_event_mask_state() {
  ::DeviceSerialization::DigitalEventMaskState* _msg = _internal_mutable_digital_event_mask_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.digital_event_mask_state)
  return _msg;
}
inline void DeviceState::set_allocated_digital_event_mask_state(::DeviceSerialization::DigitalEventMaskState* digital_event_mask_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.digital_event_mask_state_);
  }
  if (digital_event_mask_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digital_event_mask_state));
    if (message_arena != submessage_arena) {
      digital_event_mask_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digital_event_mask_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.digital_event_mask_state_ = digital_event_mask_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.digital_event_mask_state)
}

// .DeviceSerialization.EventRateControlState event_rate_control_state = 5;
inline bool DeviceState::_internal_has_event_rate_control_state() const {
  return this != internal_default_instance() && _impl_.event_rate_control_state_ != nullptr;
}
inline bool DeviceState::has_event_rate_control_state() const {
  return _internal_has_event_rate_control_state();
}
inline const ::DeviceSerialization::EventRateControlState& DeviceState::_internal_event_rate_control_state() const {
  const ::DeviceSerialization::EventRateControlState* p = _impl_.event_rate_control_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::EventRateControlState&>(
      ::DeviceSerialization::_EventRateControlState_default_instance_);
}
inline const ::DeviceSerialization::EventRateControlState& DeviceState::event_rate_control_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.event_rate_control_state)
  return _internal_event_rate_control_state();
}
inline void DeviceState::unsafe_arena_set_allocated_event_rate_control_state(
    ::DeviceSerialization::EventRateControlState* event_rate_control_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_rate_control_state_);
  }
  _impl_.event_rate_control_state_ = event_rate_control_state;
  if (event_rate_control_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.event_rate_control_state)
}
inline ::DeviceSerialization::EventRateControlState* DeviceState::release_event_rate_control_state() {
  
  ::DeviceSerialization::EventRateControlState* temp = _impl_.event_rate_control_state_;
  _impl_.event_rate_control_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::EventRateControlState* DeviceState::unsafe_arena_release_event_rate_control_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.event_rate_control_state)
  
  ::DeviceSerialization::EventRateControlState* temp = _impl_.event_rate_control_state_;
  _impl_.event_rate_control_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::EventRateControlState* DeviceState::_internal_mutable_event_rate_control_state() {
  
  if (_impl_.event_rate_control_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::EventRateControlState>(GetArenaForAllocation());
    _impl_.event_rate_control_state_ = p;
  }
  return _impl_.event_rate_control_state_;
}
inline ::DeviceSerialization::EventRateControlState* DeviceState::mutable_event_rate_control_state() {
  ::DeviceSerialization::EventRateControlState* _msg = _internal_mutable_event_rate_control_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.event_rate_control_state)
  return _msg;
}
inline void DeviceState::set_allocated_event_rate_control_state(::DeviceSerialization::EventRateControlState* event_rate_control_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_rate_control_state_);
  }
  if (event_rate_control_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_rate_control_state));
    if (message_arena != submessage_arena) {
      event_rate_control_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_rate_control_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.event_rate_control_state_ = event_rate_control_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.event_rate_control_state)
}

// .DeviceSerialization.EventRateNoiseFilterState event_rate_noise_filter_state = 6;
inline bool DeviceState::_internal_has_event_rate_noise_filter_state() const {
  return this != internal_default_instance() && _impl_.event_rate_noise_filter_state_ != nullptr;
}
inline bool DeviceState::has_event_rate_noise_filter_state() const {
  return _internal_has_event_rate_noise_filter_state();
}
inline const ::DeviceSerialization::EventRateNoiseFilterState& DeviceState::_internal_event_rate_noise_filter_state() const {
  const ::DeviceSerialization::EventRateNoiseFilterState* p = _impl_.event_rate_noise_filter_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::EventRateNoiseFilterState&>(
      ::DeviceSerialization::_EventRateNoiseFilterState_default_instance_);
}
inline const ::DeviceSerialization::EventRateNoiseFilterState& DeviceState::event_rate_noise_filter_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.event_rate_noise_filter_state)
  return _internal_event_rate_noise_filter_state();
}
inline void DeviceState::unsafe_arena_set_allocated_event_rate_noise_filter_state(
    ::DeviceSerialization::EventRateNoiseFilterState* event_rate_noise_filter_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_rate_noise_filter_state_);
  }
  _impl_.event_rate_noise_filter_state_ = event_rate_noise_filter_state;
  if (event_rate_noise_filter_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.event_rate_noise_filter_state)
}
inline ::DeviceSerialization::EventRateNoiseFilterState* DeviceState::release_event_rate_noise_filter_state() {
  
  ::DeviceSerialization::EventRateNoiseFilterState* temp = _impl_.event_rate_noise_filter_state_;
  _impl_.event_rate_noise_filter_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::EventRateNoiseFilterState* DeviceState::unsafe_arena_release_event_rate_noise_filter_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.event_rate_noise_filter_state)
  
  ::DeviceSerialization::EventRateNoiseFilterState* temp = _impl_.event_rate_noise_filter_state_;
  _impl_.event_rate_noise_filter_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::EventRateNoiseFilterState* DeviceState::_internal_mutable_event_rate_noise_filter_state() {
  
  if (_impl_.event_rate_noise_filter_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::EventRateNoiseFilterState>(GetArenaForAllocation());
    _impl_.event_rate_noise_filter_state_ = p;
  }
  return _impl_.event_rate_noise_filter_state_;
}
inline ::DeviceSerialization::EventRateNoiseFilterState* DeviceState::mutable_event_rate_noise_filter_state() {
  ::DeviceSerialization::EventRateNoiseFilterState* _msg = _internal_mutable_event_rate_noise_filter_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.event_rate_noise_filter_state)
  return _msg;
}
inline void DeviceState::set_allocated_event_rate_noise_filter_state(::DeviceSerialization::EventRateNoiseFilterState* event_rate_noise_filter_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_rate_noise_filter_state_);
  }
  if (event_rate_noise_filter_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_rate_noise_filter_state));
    if (message_arena != submessage_arena) {
      event_rate_noise_filter_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_rate_noise_filter_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.event_rate_noise_filter_state_ = event_rate_noise_filter_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.event_rate_noise_filter_state)
}

// .DeviceSerialization.EventTrailFilterState event_trail_filter_state = 7;
inline bool DeviceState::_internal_has_event_trail_filter_state() const {
  return this != internal_default_instance() && _impl_.event_trail_filter_state_ != nullptr;
}
inline bool DeviceState::has_event_trail_filter_state() const {
  return _internal_has_event_trail_filter_state();
}
inline const ::DeviceSerialization::EventTrailFilterState& DeviceState::_internal_event_trail_filter_state() const {
  const ::DeviceSerialization::EventTrailFilterState* p = _impl_.event_trail_filter_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::EventTrailFilterState&>(
      ::DeviceSerialization::_EventTrailFilterState_default_instance_);
}
inline const ::DeviceSerialization::EventTrailFilterState& DeviceState::event_trail_filter_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.event_trail_filter_state)
  return _internal_event_trail_filter_state();
}
inline void DeviceState::unsafe_arena_set_allocated_event_trail_filter_state(
    ::DeviceSerialization::EventTrailFilterState* event_trail_filter_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_trail_filter_state_);
  }
  _impl_.event_trail_filter_state_ = event_trail_filter_state;
  if (event_trail_filter_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.event_trail_filter_state)
}
inline ::DeviceSerialization::EventTrailFilterState* DeviceState::release_event_trail_filter_state() {
  
  ::DeviceSerialization::EventTrailFilterState* temp = _impl_.event_trail_filter_state_;
  _impl_.event_trail_filter_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::EventTrailFilterState* DeviceState::unsafe_arena_release_event_trail_filter_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.event_trail_filter_state)
  
  ::DeviceSerialization::EventTrailFilterState* temp = _impl_.event_trail_filter_state_;
  _impl_.event_trail_filter_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::EventTrailFilterState* DeviceState::_internal_mutable_event_trail_filter_state() {
  
  if (_impl_.event_trail_filter_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::EventTrailFilterState>(GetArenaForAllocation());
    _impl_.event_trail_filter_state_ = p;
  }
  return _impl_.event_trail_filter_state_;
}
inline ::DeviceSerialization::EventTrailFilterState* DeviceState::mutable_event_trail_filter_state() {
  ::DeviceSerialization::EventTrailFilterState* _msg = _internal_mutable_event_trail_filter_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.event_trail_filter_state)
  return _msg;
}
inline void DeviceState::set_allocated_event_trail_filter_state(::DeviceSerialization::EventTrailFilterState* event_trail_filter_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_trail_filter_state_);
  }
  if (event_trail_filter_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_trail_filter_state));
    if (message_arena != submessage_arena) {
      event_trail_filter_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_trail_filter_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.event_trail_filter_state_ = event_trail_filter_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.event_trail_filter_state)
}

// .DeviceSerialization.HWRegisterState hw_register_state = 8;
inline bool DeviceState::_internal_has_hw_register_state() const {
  return this != internal_default_instance() && _impl_.hw_register_state_ != nullptr;
}
inline bool DeviceState::has_hw_register_state() const {
  return _internal_has_hw_register_state();
}
inline const ::DeviceSerialization::HWRegisterState& DeviceState::_internal_hw_register_state() const {
  const ::DeviceSerialization::HWRegisterState* p = _impl_.hw_register_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::HWRegisterState&>(
      ::DeviceSerialization::_HWRegisterState_default_instance_);
}
inline const ::DeviceSerialization::HWRegisterState& DeviceState::hw_register_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.hw_register_state)
  return _internal_hw_register_state();
}
inline void DeviceState::unsafe_arena_set_allocated_hw_register_state(
    ::DeviceSerialization::HWRegisterState* hw_register_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hw_register_state_);
  }
  _impl_.hw_register_state_ = hw_register_state;
  if (hw_register_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.hw_register_state)
}
inline ::DeviceSerialization::HWRegisterState* DeviceState::release_hw_register_state() {
  
  ::DeviceSerialization::HWRegisterState* temp = _impl_.hw_register_state_;
  _impl_.hw_register_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::HWRegisterState* DeviceState::unsafe_arena_release_hw_register_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.hw_register_state)
  
  ::DeviceSerialization::HWRegisterState* temp = _impl_.hw_register_state_;
  _impl_.hw_register_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::HWRegisterState* DeviceState::_internal_mutable_hw_register_state() {
  
  if (_impl_.hw_register_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::HWRegisterState>(GetArenaForAllocation());
    _impl_.hw_register_state_ = p;
  }
  return _impl_.hw_register_state_;
}
inline ::DeviceSerialization::HWRegisterState* DeviceState::mutable_hw_register_state() {
  ::DeviceSerialization::HWRegisterState* _msg = _internal_mutable_hw_register_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.hw_register_state)
  return _msg;
}
inline void DeviceState::set_allocated_hw_register_state(::DeviceSerialization::HWRegisterState* hw_register_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hw_register_state_);
  }
  if (hw_register_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_register_state));
    if (message_arena != submessage_arena) {
      hw_register_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw_register_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hw_register_state_ = hw_register_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.hw_register_state)
}

// .DeviceSerialization.LLBiasesState ll_biases_state = 9;
inline bool DeviceState::_internal_has_ll_biases_state() const {
  return this != internal_default_instance() && _impl_.ll_biases_state_ != nullptr;
}
inline bool DeviceState::has_ll_biases_state() const {
  return _internal_has_ll_biases_state();
}
inline const ::DeviceSerialization::LLBiasesState& DeviceState::_internal_ll_biases_state() const {
  const ::DeviceSerialization::LLBiasesState* p = _impl_.ll_biases_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::LLBiasesState&>(
      ::DeviceSerialization::_LLBiasesState_default_instance_);
}
inline const ::DeviceSerialization::LLBiasesState& DeviceState::ll_biases_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.ll_biases_state)
  return _internal_ll_biases_state();
}
inline void DeviceState::unsafe_arena_set_allocated_ll_biases_state(
    ::DeviceSerialization::LLBiasesState* ll_biases_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ll_biases_state_);
  }
  _impl_.ll_biases_state_ = ll_biases_state;
  if (ll_biases_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.ll_biases_state)
}
inline ::DeviceSerialization::LLBiasesState* DeviceState::release_ll_biases_state() {
  
  ::DeviceSerialization::LLBiasesState* temp = _impl_.ll_biases_state_;
  _impl_.ll_biases_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::LLBiasesState* DeviceState::unsafe_arena_release_ll_biases_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.ll_biases_state)
  
  ::DeviceSerialization::LLBiasesState* temp = _impl_.ll_biases_state_;
  _impl_.ll_biases_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::LLBiasesState* DeviceState::_internal_mutable_ll_biases_state() {
  
  if (_impl_.ll_biases_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::LLBiasesState>(GetArenaForAllocation());
    _impl_.ll_biases_state_ = p;
  }
  return _impl_.ll_biases_state_;
}
inline ::DeviceSerialization::LLBiasesState* DeviceState::mutable_ll_biases_state() {
  ::DeviceSerialization::LLBiasesState* _msg = _internal_mutable_ll_biases_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.ll_biases_state)
  return _msg;
}
inline void DeviceState::set_allocated_ll_biases_state(::DeviceSerialization::LLBiasesState* ll_biases_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ll_biases_state_);
  }
  if (ll_biases_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ll_biases_state));
    if (message_arena != submessage_arena) {
      ll_biases_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ll_biases_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ll_biases_state_ = ll_biases_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.ll_biases_state)
}

// .DeviceSerialization.RegionOfInterestState roi_state = 10;
inline bool DeviceState::_internal_has_roi_state() const {
  return this != internal_default_instance() && _impl_.roi_state_ != nullptr;
}
inline bool DeviceState::has_roi_state() const {
  return _internal_has_roi_state();
}
inline const ::DeviceSerialization::RegionOfInterestState& DeviceState::_internal_roi_state() const {
  const ::DeviceSerialization::RegionOfInterestState* p = _impl_.roi_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::RegionOfInterestState&>(
      ::DeviceSerialization::_RegionOfInterestState_default_instance_);
}
inline const ::DeviceSerialization::RegionOfInterestState& DeviceState::roi_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.roi_state)
  return _internal_roi_state();
}
inline void DeviceState::unsafe_arena_set_allocated_roi_state(
    ::DeviceSerialization::RegionOfInterestState* roi_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_state_);
  }
  _impl_.roi_state_ = roi_state;
  if (roi_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.roi_state)
}
inline ::DeviceSerialization::RegionOfInterestState* DeviceState::release_roi_state() {
  
  ::DeviceSerialization::RegionOfInterestState* temp = _impl_.roi_state_;
  _impl_.roi_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::RegionOfInterestState* DeviceState::unsafe_arena_release_roi_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.roi_state)
  
  ::DeviceSerialization::RegionOfInterestState* temp = _impl_.roi_state_;
  _impl_.roi_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::RegionOfInterestState* DeviceState::_internal_mutable_roi_state() {
  
  if (_impl_.roi_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::RegionOfInterestState>(GetArenaForAllocation());
    _impl_.roi_state_ = p;
  }
  return _impl_.roi_state_;
}
inline ::DeviceSerialization::RegionOfInterestState* DeviceState::mutable_roi_state() {
  ::DeviceSerialization::RegionOfInterestState* _msg = _internal_mutable_roi_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.roi_state)
  return _msg;
}
inline void DeviceState::set_allocated_roi_state(::DeviceSerialization::RegionOfInterestState* roi_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roi_state_);
  }
  if (roi_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_state));
    if (message_arena != submessage_arena) {
      roi_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roi_state_ = roi_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.roi_state)
}

// .DeviceSerialization.TriggerInState trigger_in_state = 11;
inline bool DeviceState::_internal_has_trigger_in_state() const {
  return this != internal_default_instance() && _impl_.trigger_in_state_ != nullptr;
}
inline bool DeviceState::has_trigger_in_state() const {
  return _internal_has_trigger_in_state();
}
inline const ::DeviceSerialization::TriggerInState& DeviceState::_internal_trigger_in_state() const {
  const ::DeviceSerialization::TriggerInState* p = _impl_.trigger_in_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::TriggerInState&>(
      ::DeviceSerialization::_TriggerInState_default_instance_);
}
inline const ::DeviceSerialization::TriggerInState& DeviceState::trigger_in_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.trigger_in_state)
  return _internal_trigger_in_state();
}
inline void DeviceState::unsafe_arena_set_allocated_trigger_in_state(
    ::DeviceSerialization::TriggerInState* trigger_in_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_in_state_);
  }
  _impl_.trigger_in_state_ = trigger_in_state;
  if (trigger_in_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.trigger_in_state)
}
inline ::DeviceSerialization::TriggerInState* DeviceState::release_trigger_in_state() {
  
  ::DeviceSerialization::TriggerInState* temp = _impl_.trigger_in_state_;
  _impl_.trigger_in_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::TriggerInState* DeviceState::unsafe_arena_release_trigger_in_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.trigger_in_state)
  
  ::DeviceSerialization::TriggerInState* temp = _impl_.trigger_in_state_;
  _impl_.trigger_in_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::TriggerInState* DeviceState::_internal_mutable_trigger_in_state() {
  
  if (_impl_.trigger_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::TriggerInState>(GetArenaForAllocation());
    _impl_.trigger_in_state_ = p;
  }
  return _impl_.trigger_in_state_;
}
inline ::DeviceSerialization::TriggerInState* DeviceState::mutable_trigger_in_state() {
  ::DeviceSerialization::TriggerInState* _msg = _internal_mutable_trigger_in_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.trigger_in_state)
  return _msg;
}
inline void DeviceState::set_allocated_trigger_in_state(::DeviceSerialization::TriggerInState* trigger_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_in_state_);
  }
  if (trigger_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_in_state));
    if (message_arena != submessage_arena) {
      trigger_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_in_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trigger_in_state_ = trigger_in_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.trigger_in_state)
}

// .DeviceSerialization.TriggerOutState trigger_out_state = 12;
inline bool DeviceState::_internal_has_trigger_out_state() const {
  return this != internal_default_instance() && _impl_.trigger_out_state_ != nullptr;
}
inline bool DeviceState::has_trigger_out_state() const {
  return _internal_has_trigger_out_state();
}
inline const ::DeviceSerialization::TriggerOutState& DeviceState::_internal_trigger_out_state() const {
  const ::DeviceSerialization::TriggerOutState* p = _impl_.trigger_out_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::TriggerOutState&>(
      ::DeviceSerialization::_TriggerOutState_default_instance_);
}
inline const ::DeviceSerialization::TriggerOutState& DeviceState::trigger_out_state() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DeviceState.trigger_out_state)
  return _internal_trigger_out_state();
}
inline void DeviceState::unsafe_arena_set_allocated_trigger_out_state(
    ::DeviceSerialization::TriggerOutState* trigger_out_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_out_state_);
  }
  _impl_.trigger_out_state_ = trigger_out_state;
  if (trigger_out_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DeviceState.trigger_out_state)
}
inline ::DeviceSerialization::TriggerOutState* DeviceState::release_trigger_out_state() {
  
  ::DeviceSerialization::TriggerOutState* temp = _impl_.trigger_out_state_;
  _impl_.trigger_out_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::TriggerOutState* DeviceState::unsafe_arena_release_trigger_out_state() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DeviceState.trigger_out_state)
  
  ::DeviceSerialization::TriggerOutState* temp = _impl_.trigger_out_state_;
  _impl_.trigger_out_state_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::TriggerOutState* DeviceState::_internal_mutable_trigger_out_state() {
  
  if (_impl_.trigger_out_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::TriggerOutState>(GetArenaForAllocation());
    _impl_.trigger_out_state_ = p;
  }
  return _impl_.trigger_out_state_;
}
inline ::DeviceSerialization::TriggerOutState* DeviceState::mutable_trigger_out_state() {
  ::DeviceSerialization::TriggerOutState* _msg = _internal_mutable_trigger_out_state();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DeviceState.trigger_out_state)
  return _msg;
}
inline void DeviceState::set_allocated_trigger_out_state(::DeviceSerialization::TriggerOutState* trigger_out_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trigger_out_state_);
  }
  if (trigger_out_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_out_state));
    if (message_arena != submessage_arena) {
      trigger_out_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_out_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.trigger_out_state_ = trigger_out_state;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DeviceState.trigger_out_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_device_5fstate_2eproto
