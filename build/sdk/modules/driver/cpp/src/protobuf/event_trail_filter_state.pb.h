// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_trail_filter_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_event_5ftrail_5ffilter_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_event_5ftrail_5ffilter_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_event_5ftrail_5ffilter_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_event_5ftrail_5ffilter_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_event_5ftrail_5ffilter_5fstate_2eproto;
namespace DeviceSerialization {
class EventTrailFilterState;
struct EventTrailFilterStateDefaultTypeInternal;
extern EventTrailFilterStateDefaultTypeInternal _EventTrailFilterState_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::EventTrailFilterState* Arena::CreateMaybeMessage<::DeviceSerialization::EventTrailFilterState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

enum EventTrailFilterState_EventTrailFilteringType : int {
  EventTrailFilterState_EventTrailFilteringType_TRAIL = 0,
  EventTrailFilterState_EventTrailFilteringType_STC_CUT_TRAIL = 1,
  EventTrailFilterState_EventTrailFilteringType_STC_KEEP_TRAIL = 2,
  EventTrailFilterState_EventTrailFilteringType_EventTrailFilterState_EventTrailFilteringType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventTrailFilterState_EventTrailFilteringType_EventTrailFilterState_EventTrailFilteringType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventTrailFilterState_EventTrailFilteringType_IsValid(int value);
constexpr EventTrailFilterState_EventTrailFilteringType EventTrailFilterState_EventTrailFilteringType_EventTrailFilteringType_MIN = EventTrailFilterState_EventTrailFilteringType_TRAIL;
constexpr EventTrailFilterState_EventTrailFilteringType EventTrailFilterState_EventTrailFilteringType_EventTrailFilteringType_MAX = EventTrailFilterState_EventTrailFilteringType_STC_KEEP_TRAIL;
constexpr int EventTrailFilterState_EventTrailFilteringType_EventTrailFilteringType_ARRAYSIZE = EventTrailFilterState_EventTrailFilteringType_EventTrailFilteringType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventTrailFilterState_EventTrailFilteringType_descriptor();
template<typename T>
inline const std::string& EventTrailFilterState_EventTrailFilteringType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventTrailFilterState_EventTrailFilteringType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventTrailFilterState_EventTrailFilteringType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventTrailFilterState_EventTrailFilteringType_descriptor(), enum_t_value);
}
inline bool EventTrailFilterState_EventTrailFilteringType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventTrailFilterState_EventTrailFilteringType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventTrailFilterState_EventTrailFilteringType>(
    EventTrailFilterState_EventTrailFilteringType_descriptor(), name, value);
}
// ===================================================================

class EventTrailFilterState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.EventTrailFilterState) */ {
 public:
  inline EventTrailFilterState() : EventTrailFilterState(nullptr) {}
  ~EventTrailFilterState() override;
  explicit PROTOBUF_CONSTEXPR EventTrailFilterState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventTrailFilterState(const EventTrailFilterState& from);
  EventTrailFilterState(EventTrailFilterState&& from) noexcept
    : EventTrailFilterState() {
    *this = ::std::move(from);
  }

  inline EventTrailFilterState& operator=(const EventTrailFilterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventTrailFilterState& operator=(EventTrailFilterState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventTrailFilterState& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalEnabledCase {
    kEnabled = 1,
    OPTIONAL_ENABLED_NOT_SET = 0,
  };

  enum OptionalFilteringTypeCase {
    kFilteringType = 2,
    OPTIONAL_FILTERING_TYPE_NOT_SET = 0,
  };

  enum OptionalThresholdCase {
    kThreshold = 3,
    OPTIONAL_THRESHOLD_NOT_SET = 0,
  };

  static inline const EventTrailFilterState* internal_default_instance() {
    return reinterpret_cast<const EventTrailFilterState*>(
               &_EventTrailFilterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventTrailFilterState& a, EventTrailFilterState& b) {
    a.Swap(&b);
  }
  inline void Swap(EventTrailFilterState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventTrailFilterState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventTrailFilterState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventTrailFilterState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventTrailFilterState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventTrailFilterState& from) {
    EventTrailFilterState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventTrailFilterState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.EventTrailFilterState";
  }
  protected:
  explicit EventTrailFilterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventTrailFilterState_EventTrailFilteringType EventTrailFilteringType;
  static constexpr EventTrailFilteringType TRAIL =
    EventTrailFilterState_EventTrailFilteringType_TRAIL;
  static constexpr EventTrailFilteringType STC_CUT_TRAIL =
    EventTrailFilterState_EventTrailFilteringType_STC_CUT_TRAIL;
  static constexpr EventTrailFilteringType STC_KEEP_TRAIL =
    EventTrailFilterState_EventTrailFilteringType_STC_KEEP_TRAIL;
  static inline bool EventTrailFilteringType_IsValid(int value) {
    return EventTrailFilterState_EventTrailFilteringType_IsValid(value);
  }
  static constexpr EventTrailFilteringType EventTrailFilteringType_MIN =
    EventTrailFilterState_EventTrailFilteringType_EventTrailFilteringType_MIN;
  static constexpr EventTrailFilteringType EventTrailFilteringType_MAX =
    EventTrailFilterState_EventTrailFilteringType_EventTrailFilteringType_MAX;
  static constexpr int EventTrailFilteringType_ARRAYSIZE =
    EventTrailFilterState_EventTrailFilteringType_EventTrailFilteringType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventTrailFilteringType_descriptor() {
    return EventTrailFilterState_EventTrailFilteringType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventTrailFilteringType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventTrailFilteringType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventTrailFilteringType_Name.");
    return EventTrailFilterState_EventTrailFilteringType_Name(enum_t_value);
  }
  static inline bool EventTrailFilteringType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventTrailFilteringType* value) {
    return EventTrailFilterState_EventTrailFilteringType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kFilteringTypeFieldNumber = 2,
    kThresholdFieldNumber = 3,
  };
  // bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // .DeviceSerialization.EventTrailFilterState.EventTrailFilteringType filtering_type = 2;
  bool has_filtering_type() const;
  private:
  bool _internal_has_filtering_type() const;
  public:
  void clear_filtering_type();
  ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType filtering_type() const;
  void set_filtering_type(::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType value);
  private:
  ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType _internal_filtering_type() const;
  void _internal_set_filtering_type(::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType value);
  public:

  // uint32 threshold = 3;
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  uint32_t threshold() const;
  void set_threshold(uint32_t value);
  private:
  uint32_t _internal_threshold() const;
  void _internal_set_threshold(uint32_t value);
  public:

  void clear_optional_enabled();
  OptionalEnabledCase optional_enabled_case() const;
  void clear_optional_filtering_type();
  OptionalFilteringTypeCase optional_filtering_type_case() const;
  void clear_optional_threshold();
  OptionalThresholdCase optional_threshold_case() const;
  // @@protoc_insertion_point(class_scope:DeviceSerialization.EventTrailFilterState)
 private:
  class _Internal;
  void set_has_enabled();
  void set_has_filtering_type();
  void set_has_threshold();

  inline bool has_optional_enabled() const;
  inline void clear_has_optional_enabled();

  inline bool has_optional_filtering_type() const;
  inline void clear_has_optional_filtering_type();

  inline bool has_optional_threshold() const;
  inline void clear_has_optional_threshold();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionalEnabledUnion {
      constexpr OptionalEnabledUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool enabled_;
    } optional_enabled_;
    union OptionalFilteringTypeUnion {
      constexpr OptionalFilteringTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int filtering_type_;
    } optional_filtering_type_;
    union OptionalThresholdUnion {
      constexpr OptionalThresholdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t threshold_;
    } optional_threshold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_5ftrail_5ffilter_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventTrailFilterState

// bool enabled = 1;
inline bool EventTrailFilterState::_internal_has_enabled() const {
  return optional_enabled_case() == kEnabled;
}
inline bool EventTrailFilterState::has_enabled() const {
  return _internal_has_enabled();
}
inline void EventTrailFilterState::set_has_enabled() {
  _impl_._oneof_case_[0] = kEnabled;
}
inline void EventTrailFilterState::clear_enabled() {
  if (_internal_has_enabled()) {
    _impl_.optional_enabled_.enabled_ = false;
    clear_has_optional_enabled();
  }
}
inline bool EventTrailFilterState::_internal_enabled() const {
  if (_internal_has_enabled()) {
    return _impl_.optional_enabled_.enabled_;
  }
  return false;
}
inline void EventTrailFilterState::_internal_set_enabled(bool value) {
  if (!_internal_has_enabled()) {
    clear_optional_enabled();
    set_has_enabled();
  }
  _impl_.optional_enabled_.enabled_ = value;
}
inline bool EventTrailFilterState::enabled() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.EventTrailFilterState.enabled)
  return _internal_enabled();
}
inline void EventTrailFilterState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.EventTrailFilterState.enabled)
}

// .DeviceSerialization.EventTrailFilterState.EventTrailFilteringType filtering_type = 2;
inline bool EventTrailFilterState::_internal_has_filtering_type() const {
  return optional_filtering_type_case() == kFilteringType;
}
inline bool EventTrailFilterState::has_filtering_type() const {
  return _internal_has_filtering_type();
}
inline void EventTrailFilterState::set_has_filtering_type() {
  _impl_._oneof_case_[1] = kFilteringType;
}
inline void EventTrailFilterState::clear_filtering_type() {
  if (_internal_has_filtering_type()) {
    _impl_.optional_filtering_type_.filtering_type_ = 0;
    clear_has_optional_filtering_type();
  }
}
inline ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType EventTrailFilterState::_internal_filtering_type() const {
  if (_internal_has_filtering_type()) {
    return static_cast< ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType >(_impl_.optional_filtering_type_.filtering_type_);
  }
  return static_cast< ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType >(0);
}
inline ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType EventTrailFilterState::filtering_type() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.EventTrailFilterState.filtering_type)
  return _internal_filtering_type();
}
inline void EventTrailFilterState::_internal_set_filtering_type(::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType value) {
  if (!_internal_has_filtering_type()) {
    clear_optional_filtering_type();
    set_has_filtering_type();
  }
  _impl_.optional_filtering_type_.filtering_type_ = value;
}
inline void EventTrailFilterState::set_filtering_type(::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType value) {
  _internal_set_filtering_type(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.EventTrailFilterState.filtering_type)
}

// uint32 threshold = 3;
inline bool EventTrailFilterState::_internal_has_threshold() const {
  return optional_threshold_case() == kThreshold;
}
inline bool EventTrailFilterState::has_threshold() const {
  return _internal_has_threshold();
}
inline void EventTrailFilterState::set_has_threshold() {
  _impl_._oneof_case_[2] = kThreshold;
}
inline void EventTrailFilterState::clear_threshold() {
  if (_internal_has_threshold()) {
    _impl_.optional_threshold_.threshold_ = 0u;
    clear_has_optional_threshold();
  }
}
inline uint32_t EventTrailFilterState::_internal_threshold() const {
  if (_internal_has_threshold()) {
    return _impl_.optional_threshold_.threshold_;
  }
  return 0u;
}
inline void EventTrailFilterState::_internal_set_threshold(uint32_t value) {
  if (!_internal_has_threshold()) {
    clear_optional_threshold();
    set_has_threshold();
  }
  _impl_.optional_threshold_.threshold_ = value;
}
inline uint32_t EventTrailFilterState::threshold() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.EventTrailFilterState.threshold)
  return _internal_threshold();
}
inline void EventTrailFilterState::set_threshold(uint32_t value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.EventTrailFilterState.threshold)
}

inline bool EventTrailFilterState::has_optional_enabled() const {
  return optional_enabled_case() != OPTIONAL_ENABLED_NOT_SET;
}
inline void EventTrailFilterState::clear_has_optional_enabled() {
  _impl_._oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}
inline bool EventTrailFilterState::has_optional_filtering_type() const {
  return optional_filtering_type_case() != OPTIONAL_FILTERING_TYPE_NOT_SET;
}
inline void EventTrailFilterState::clear_has_optional_filtering_type() {
  _impl_._oneof_case_[1] = OPTIONAL_FILTERING_TYPE_NOT_SET;
}
inline bool EventTrailFilterState::has_optional_threshold() const {
  return optional_threshold_case() != OPTIONAL_THRESHOLD_NOT_SET;
}
inline void EventTrailFilterState::clear_has_optional_threshold() {
  _impl_._oneof_case_[2] = OPTIONAL_THRESHOLD_NOT_SET;
}
inline EventTrailFilterState::OptionalEnabledCase EventTrailFilterState::optional_enabled_case() const {
  return EventTrailFilterState::OptionalEnabledCase(_impl_._oneof_case_[0]);
}
inline EventTrailFilterState::OptionalFilteringTypeCase EventTrailFilterState::optional_filtering_type_case() const {
  return EventTrailFilterState::OptionalFilteringTypeCase(_impl_._oneof_case_[1]);
}
inline EventTrailFilterState::OptionalThresholdCase EventTrailFilterState::optional_threshold_case() const {
  return EventTrailFilterState::OptionalThresholdCase(_impl_._oneof_case_[2]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType>() {
  return ::DeviceSerialization::EventTrailFilterState_EventTrailFilteringType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_event_5ftrail_5ffilter_5fstate_2eproto
