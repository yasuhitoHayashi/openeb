// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: digital_crop_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_digital_5fcrop_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_digital_5fcrop_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_digital_5fcrop_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_digital_5fcrop_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_digital_5fcrop_5fstate_2eproto;
namespace DeviceSerialization {
class DigitalCropState;
struct DigitalCropStateDefaultTypeInternal;
extern DigitalCropStateDefaultTypeInternal _DigitalCropState_default_instance_;
class DigitalCropState_Region;
struct DigitalCropState_RegionDefaultTypeInternal;
extern DigitalCropState_RegionDefaultTypeInternal _DigitalCropState_Region_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::DigitalCropState* Arena::CreateMaybeMessage<::DeviceSerialization::DigitalCropState>(Arena*);
template<> ::DeviceSerialization::DigitalCropState_Region* Arena::CreateMaybeMessage<::DeviceSerialization::DigitalCropState_Region>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

// ===================================================================

class DigitalCropState_Region final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.DigitalCropState.Region) */ {
 public:
  inline DigitalCropState_Region() : DigitalCropState_Region(nullptr) {}
  ~DigitalCropState_Region() override;
  explicit PROTOBUF_CONSTEXPR DigitalCropState_Region(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalCropState_Region(const DigitalCropState_Region& from);
  DigitalCropState_Region(DigitalCropState_Region&& from) noexcept
    : DigitalCropState_Region() {
    *this = ::std::move(from);
  }

  inline DigitalCropState_Region& operator=(const DigitalCropState_Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalCropState_Region& operator=(DigitalCropState_Region&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalCropState_Region& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalCropState_Region* internal_default_instance() {
    return reinterpret_cast<const DigitalCropState_Region*>(
               &_DigitalCropState_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DigitalCropState_Region& a, DigitalCropState_Region& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalCropState_Region* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalCropState_Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalCropState_Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalCropState_Region>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalCropState_Region& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigitalCropState_Region& from) {
    DigitalCropState_Region::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalCropState_Region* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.DigitalCropState.Region";
  }
  protected:
  explicit DigitalCropState_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
  };
  // uint32 X1 = 1;
  void clear_x1();
  uint32_t x1() const;
  void set_x1(uint32_t value);
  private:
  uint32_t _internal_x1() const;
  void _internal_set_x1(uint32_t value);
  public:

  // uint32 Y1 = 2;
  void clear_y1();
  uint32_t y1() const;
  void set_y1(uint32_t value);
  private:
  uint32_t _internal_y1() const;
  void _internal_set_y1(uint32_t value);
  public:

  // uint32 X2 = 3;
  void clear_x2();
  uint32_t x2() const;
  void set_x2(uint32_t value);
  private:
  uint32_t _internal_x2() const;
  void _internal_set_x2(uint32_t value);
  public:

  // uint32 Y2 = 4;
  void clear_y2();
  uint32_t y2() const;
  void set_y2(uint32_t value);
  private:
  uint32_t _internal_y2() const;
  void _internal_set_y2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceSerialization.DigitalCropState.Region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t x1_;
    uint32_t y1_;
    uint32_t x2_;
    uint32_t y2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_digital_5fcrop_5fstate_2eproto;
};
// -------------------------------------------------------------------

class DigitalCropState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.DigitalCropState) */ {
 public:
  inline DigitalCropState() : DigitalCropState(nullptr) {}
  ~DigitalCropState() override;
  explicit PROTOBUF_CONSTEXPR DigitalCropState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalCropState(const DigitalCropState& from);
  DigitalCropState(DigitalCropState&& from) noexcept
    : DigitalCropState() {
    *this = ::std::move(from);
  }

  inline DigitalCropState& operator=(const DigitalCropState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalCropState& operator=(DigitalCropState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalCropState& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalEnabledCase {
    kEnabled = 1,
    OPTIONAL_ENABLED_NOT_SET = 0,
  };

  static inline const DigitalCropState* internal_default_instance() {
    return reinterpret_cast<const DigitalCropState*>(
               &_DigitalCropState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DigitalCropState& a, DigitalCropState& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalCropState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalCropState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalCropState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalCropState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalCropState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigitalCropState& from) {
    DigitalCropState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalCropState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.DigitalCropState";
  }
  protected:
  explicit DigitalCropState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DigitalCropState_Region Region;

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // .DeviceSerialization.DigitalCropState.Region region = 2;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::DeviceSerialization::DigitalCropState_Region& region() const;
  PROTOBUF_NODISCARD ::DeviceSerialization::DigitalCropState_Region* release_region();
  ::DeviceSerialization::DigitalCropState_Region* mutable_region();
  void set_allocated_region(::DeviceSerialization::DigitalCropState_Region* region);
  private:
  const ::DeviceSerialization::DigitalCropState_Region& _internal_region() const;
  ::DeviceSerialization::DigitalCropState_Region* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::DeviceSerialization::DigitalCropState_Region* region);
  ::DeviceSerialization::DigitalCropState_Region* unsafe_arena_release_region();

  // bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  void clear_optional_enabled();
  OptionalEnabledCase optional_enabled_case() const;
  // @@protoc_insertion_point(class_scope:DeviceSerialization.DigitalCropState)
 private:
  class _Internal;
  void set_has_enabled();

  inline bool has_optional_enabled() const;
  inline void clear_has_optional_enabled();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::DeviceSerialization::DigitalCropState_Region* region_;
    union OptionalEnabledUnion {
      constexpr OptionalEnabledUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool enabled_;
    } optional_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_digital_5fcrop_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DigitalCropState_Region

// uint32 X1 = 1;
inline void DigitalCropState_Region::clear_x1() {
  _impl_.x1_ = 0u;
}
inline uint32_t DigitalCropState_Region::_internal_x1() const {
  return _impl_.x1_;
}
inline uint32_t DigitalCropState_Region::x1() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalCropState.Region.X1)
  return _internal_x1();
}
inline void DigitalCropState_Region::_internal_set_x1(uint32_t value) {
  
  _impl_.x1_ = value;
}
inline void DigitalCropState_Region::set_x1(uint32_t value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalCropState.Region.X1)
}

// uint32 Y1 = 2;
inline void DigitalCropState_Region::clear_y1() {
  _impl_.y1_ = 0u;
}
inline uint32_t DigitalCropState_Region::_internal_y1() const {
  return _impl_.y1_;
}
inline uint32_t DigitalCropState_Region::y1() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalCropState.Region.Y1)
  return _internal_y1();
}
inline void DigitalCropState_Region::_internal_set_y1(uint32_t value) {
  
  _impl_.y1_ = value;
}
inline void DigitalCropState_Region::set_y1(uint32_t value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalCropState.Region.Y1)
}

// uint32 X2 = 3;
inline void DigitalCropState_Region::clear_x2() {
  _impl_.x2_ = 0u;
}
inline uint32_t DigitalCropState_Region::_internal_x2() const {
  return _impl_.x2_;
}
inline uint32_t DigitalCropState_Region::x2() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalCropState.Region.X2)
  return _internal_x2();
}
inline void DigitalCropState_Region::_internal_set_x2(uint32_t value) {
  
  _impl_.x2_ = value;
}
inline void DigitalCropState_Region::set_x2(uint32_t value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalCropState.Region.X2)
}

// uint32 Y2 = 4;
inline void DigitalCropState_Region::clear_y2() {
  _impl_.y2_ = 0u;
}
inline uint32_t DigitalCropState_Region::_internal_y2() const {
  return _impl_.y2_;
}
inline uint32_t DigitalCropState_Region::y2() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalCropState.Region.Y2)
  return _internal_y2();
}
inline void DigitalCropState_Region::_internal_set_y2(uint32_t value) {
  
  _impl_.y2_ = value;
}
inline void DigitalCropState_Region::set_y2(uint32_t value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalCropState.Region.Y2)
}

// -------------------------------------------------------------------

// DigitalCropState

// bool enabled = 1;
inline bool DigitalCropState::_internal_has_enabled() const {
  return optional_enabled_case() == kEnabled;
}
inline bool DigitalCropState::has_enabled() const {
  return _internal_has_enabled();
}
inline void DigitalCropState::set_has_enabled() {
  _impl_._oneof_case_[0] = kEnabled;
}
inline void DigitalCropState::clear_enabled() {
  if (_internal_has_enabled()) {
    _impl_.optional_enabled_.enabled_ = false;
    clear_has_optional_enabled();
  }
}
inline bool DigitalCropState::_internal_enabled() const {
  if (_internal_has_enabled()) {
    return _impl_.optional_enabled_.enabled_;
  }
  return false;
}
inline void DigitalCropState::_internal_set_enabled(bool value) {
  if (!_internal_has_enabled()) {
    clear_optional_enabled();
    set_has_enabled();
  }
  _impl_.optional_enabled_.enabled_ = value;
}
inline bool DigitalCropState::enabled() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalCropState.enabled)
  return _internal_enabled();
}
inline void DigitalCropState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalCropState.enabled)
}

// .DeviceSerialization.DigitalCropState.Region region = 2;
inline bool DigitalCropState::_internal_has_region() const {
  return this != internal_default_instance() && _impl_.region_ != nullptr;
}
inline bool DigitalCropState::has_region() const {
  return _internal_has_region();
}
inline void DigitalCropState::clear_region() {
  if (GetArenaForAllocation() == nullptr && _impl_.region_ != nullptr) {
    delete _impl_.region_;
  }
  _impl_.region_ = nullptr;
}
inline const ::DeviceSerialization::DigitalCropState_Region& DigitalCropState::_internal_region() const {
  const ::DeviceSerialization::DigitalCropState_Region* p = _impl_.region_;
  return p != nullptr ? *p : reinterpret_cast<const ::DeviceSerialization::DigitalCropState_Region&>(
      ::DeviceSerialization::_DigitalCropState_Region_default_instance_);
}
inline const ::DeviceSerialization::DigitalCropState_Region& DigitalCropState::region() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalCropState.region)
  return _internal_region();
}
inline void DigitalCropState::unsafe_arena_set_allocated_region(
    ::DeviceSerialization::DigitalCropState_Region* region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.region_);
  }
  _impl_.region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DeviceSerialization.DigitalCropState.region)
}
inline ::DeviceSerialization::DigitalCropState_Region* DigitalCropState::release_region() {
  
  ::DeviceSerialization::DigitalCropState_Region* temp = _impl_.region_;
  _impl_.region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DeviceSerialization::DigitalCropState_Region* DigitalCropState::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.DigitalCropState.region)
  
  ::DeviceSerialization::DigitalCropState_Region* temp = _impl_.region_;
  _impl_.region_ = nullptr;
  return temp;
}
inline ::DeviceSerialization::DigitalCropState_Region* DigitalCropState::_internal_mutable_region() {
  
  if (_impl_.region_ == nullptr) {
    auto* p = CreateMaybeMessage<::DeviceSerialization::DigitalCropState_Region>(GetArenaForAllocation());
    _impl_.region_ = p;
  }
  return _impl_.region_;
}
inline ::DeviceSerialization::DigitalCropState_Region* DigitalCropState::mutable_region() {
  ::DeviceSerialization::DigitalCropState_Region* _msg = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DigitalCropState.region)
  return _msg;
}
inline void DigitalCropState::set_allocated_region(::DeviceSerialization::DigitalCropState_Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.region_;
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(region);
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.region_ = region;
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.DigitalCropState.region)
}

inline bool DigitalCropState::has_optional_enabled() const {
  return optional_enabled_case() != OPTIONAL_ENABLED_NOT_SET;
}
inline void DigitalCropState::clear_has_optional_enabled() {
  _impl_._oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}
inline DigitalCropState::OptionalEnabledCase DigitalCropState::optional_enabled_case() const {
  return DigitalCropState::OptionalEnabledCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_digital_5fcrop_5fstate_2eproto
