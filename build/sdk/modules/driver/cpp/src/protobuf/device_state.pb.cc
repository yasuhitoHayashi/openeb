// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_state.proto

#include "device_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DeviceSerialization {
PROTOBUF_CONSTEXPR DeviceState::DeviceState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.afk_state_)*/nullptr
  , /*decltype(_impl_.cam_sync_state_)*/nullptr
  , /*decltype(_impl_.digital_crop_state_)*/nullptr
  , /*decltype(_impl_.digital_event_mask_state_)*/nullptr
  , /*decltype(_impl_.event_rate_control_state_)*/nullptr
  , /*decltype(_impl_.event_rate_noise_filter_state_)*/nullptr
  , /*decltype(_impl_.event_trail_filter_state_)*/nullptr
  , /*decltype(_impl_.hw_register_state_)*/nullptr
  , /*decltype(_impl_.ll_biases_state_)*/nullptr
  , /*decltype(_impl_.roi_state_)*/nullptr
  , /*decltype(_impl_.trigger_in_state_)*/nullptr
  , /*decltype(_impl_.trigger_out_state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceStateDefaultTypeInternal() {}
  union {
    DeviceState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceStateDefaultTypeInternal _DeviceState_default_instance_;
}  // namespace DeviceSerialization
static ::_pb::Metadata file_level_metadata_device_5fstate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_device_5fstate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_device_5fstate_2eproto = nullptr;

const uint32_t TableStruct_device_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.afk_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.cam_sync_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.digital_crop_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.digital_event_mask_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.event_rate_control_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.event_rate_noise_filter_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.event_trail_filter_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.hw_register_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.ll_biases_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.roi_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.trigger_in_state_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DeviceState, _impl_.trigger_out_state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DeviceSerialization::DeviceState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DeviceSerialization::_DeviceState_default_instance_._instance,
};

const char descriptor_table_protodef_device_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022device_state.proto\022\023DeviceSerializatio"
  "n\032\027antiflicker_state.proto\032\"camera_synch"
  "ronization_state.proto\032\030digital_crop_sta"
  "te.proto\032\036digital_event_mask_state.proto"
  "\032\036event_rate_control_state.proto\032#event_"
  "rate_noise_filter_state.proto\032\036event_tra"
  "il_filter_state.proto\032\027hw_register_state"
  ".proto\032\025ll_biases_state.proto\032\036region_of"
  "_interest_state.proto\032\026trigger_in_state."
  "proto\032\027trigger_out_state.proto\"\321\006\n\013Devic"
  "eState\0228\n\tafk_state\030\001 \001(\0132%.DeviceSerial"
  "ization.AntiflickerState\022G\n\016cam_sync_sta"
  "te\030\002 \001(\0132/.DeviceSerialization.CameraSyn"
  "chronizationState\022A\n\022digital_crop_state\030"
  "\003 \001(\0132%.DeviceSerialization.DigitalCropS"
  "tate\022L\n\030digital_event_mask_state\030\004 \001(\0132*"
  ".DeviceSerialization.DigitalEventMaskSta"
  "te\022L\n\030event_rate_control_state\030\005 \001(\0132*.D"
  "eviceSerialization.EventRateControlState"
  "\022U\n\035event_rate_noise_filter_state\030\006 \001(\0132"
  "..DeviceSerialization.EventRateNoiseFilt"
  "erState\022L\n\030event_trail_filter_state\030\007 \001("
  "\0132*.DeviceSerialization.EventTrailFilter"
  "State\022\?\n\021hw_register_state\030\010 \001(\0132$.Devic"
  "eSerialization.HWRegisterState\022;\n\017ll_bia"
  "ses_state\030\t \001(\0132\".DeviceSerialization.LL"
  "BiasesState\022=\n\troi_state\030\n \001(\0132*.DeviceS"
  "erialization.RegionOfInterestState\022=\n\020tr"
  "igger_in_state\030\013 \001(\0132#.DeviceSerializati"
  "on.TriggerInState\022\?\n\021trigger_out_state\030\014"
  " \001(\0132$.DeviceSerialization.TriggerOutSta"
  "teb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_device_5fstate_2eproto_deps[12] = {
  &::descriptor_table_antiflicker_5fstate_2eproto,
  &::descriptor_table_camera_5fsynchronization_5fstate_2eproto,
  &::descriptor_table_digital_5fcrop_5fstate_2eproto,
  &::descriptor_table_digital_5fevent_5fmask_5fstate_2eproto,
  &::descriptor_table_event_5frate_5fcontrol_5fstate_2eproto,
  &::descriptor_table_event_5frate_5fnoise_5ffilter_5fstate_2eproto,
  &::descriptor_table_event_5ftrail_5ffilter_5fstate_2eproto,
  &::descriptor_table_hw_5fregister_5fstate_2eproto,
  &::descriptor_table_ll_5fbiases_5fstate_2eproto,
  &::descriptor_table_region_5fof_5finterest_5fstate_2eproto,
  &::descriptor_table_trigger_5fin_5fstate_2eproto,
  &::descriptor_table_trigger_5fout_5fstate_2eproto,
};
static ::_pbi::once_flag descriptor_table_device_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_device_5fstate_2eproto = {
    false, false, 1250, descriptor_table_protodef_device_5fstate_2eproto,
    "device_state.proto",
    &descriptor_table_device_5fstate_2eproto_once, descriptor_table_device_5fstate_2eproto_deps, 12, 1,
    schemas, file_default_instances, TableStruct_device_5fstate_2eproto::offsets,
    file_level_metadata_device_5fstate_2eproto, file_level_enum_descriptors_device_5fstate_2eproto,
    file_level_service_descriptors_device_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_device_5fstate_2eproto_getter() {
  return &descriptor_table_device_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_device_5fstate_2eproto(&descriptor_table_device_5fstate_2eproto);
namespace DeviceSerialization {

// ===================================================================

class DeviceState::_Internal {
 public:
  static const ::DeviceSerialization::AntiflickerState& afk_state(const DeviceState* msg);
  static const ::DeviceSerialization::CameraSynchronizationState& cam_sync_state(const DeviceState* msg);
  static const ::DeviceSerialization::DigitalCropState& digital_crop_state(const DeviceState* msg);
  static const ::DeviceSerialization::DigitalEventMaskState& digital_event_mask_state(const DeviceState* msg);
  static const ::DeviceSerialization::EventRateControlState& event_rate_control_state(const DeviceState* msg);
  static const ::DeviceSerialization::EventRateNoiseFilterState& event_rate_noise_filter_state(const DeviceState* msg);
  static const ::DeviceSerialization::EventTrailFilterState& event_trail_filter_state(const DeviceState* msg);
  static const ::DeviceSerialization::HWRegisterState& hw_register_state(const DeviceState* msg);
  static const ::DeviceSerialization::LLBiasesState& ll_biases_state(const DeviceState* msg);
  static const ::DeviceSerialization::RegionOfInterestState& roi_state(const DeviceState* msg);
  static const ::DeviceSerialization::TriggerInState& trigger_in_state(const DeviceState* msg);
  static const ::DeviceSerialization::TriggerOutState& trigger_out_state(const DeviceState* msg);
};

const ::DeviceSerialization::AntiflickerState&
DeviceState::_Internal::afk_state(const DeviceState* msg) {
  return *msg->_impl_.afk_state_;
}
const ::DeviceSerialization::CameraSynchronizationState&
DeviceState::_Internal::cam_sync_state(const DeviceState* msg) {
  return *msg->_impl_.cam_sync_state_;
}
const ::DeviceSerialization::DigitalCropState&
DeviceState::_Internal::digital_crop_state(const DeviceState* msg) {
  return *msg->_impl_.digital_crop_state_;
}
const ::DeviceSerialization::DigitalEventMaskState&
DeviceState::_Internal::digital_event_mask_state(const DeviceState* msg) {
  return *msg->_impl_.digital_event_mask_state_;
}
const ::DeviceSerialization::EventRateControlState&
DeviceState::_Internal::event_rate_control_state(const DeviceState* msg) {
  return *msg->_impl_.event_rate_control_state_;
}
const ::DeviceSerialization::EventRateNoiseFilterState&
DeviceState::_Internal::event_rate_noise_filter_state(const DeviceState* msg) {
  return *msg->_impl_.event_rate_noise_filter_state_;
}
const ::DeviceSerialization::EventTrailFilterState&
DeviceState::_Internal::event_trail_filter_state(const DeviceState* msg) {
  return *msg->_impl_.event_trail_filter_state_;
}
const ::DeviceSerialization::HWRegisterState&
DeviceState::_Internal::hw_register_state(const DeviceState* msg) {
  return *msg->_impl_.hw_register_state_;
}
const ::DeviceSerialization::LLBiasesState&
DeviceState::_Internal::ll_biases_state(const DeviceState* msg) {
  return *msg->_impl_.ll_biases_state_;
}
const ::DeviceSerialization::RegionOfInterestState&
DeviceState::_Internal::roi_state(const DeviceState* msg) {
  return *msg->_impl_.roi_state_;
}
const ::DeviceSerialization::TriggerInState&
DeviceState::_Internal::trigger_in_state(const DeviceState* msg) {
  return *msg->_impl_.trigger_in_state_;
}
const ::DeviceSerialization::TriggerOutState&
DeviceState::_Internal::trigger_out_state(const DeviceState* msg) {
  return *msg->_impl_.trigger_out_state_;
}
void DeviceState::clear_afk_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.afk_state_ != nullptr) {
    delete _impl_.afk_state_;
  }
  _impl_.afk_state_ = nullptr;
}
void DeviceState::clear_cam_sync_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.cam_sync_state_ != nullptr) {
    delete _impl_.cam_sync_state_;
  }
  _impl_.cam_sync_state_ = nullptr;
}
void DeviceState::clear_digital_crop_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.digital_crop_state_ != nullptr) {
    delete _impl_.digital_crop_state_;
  }
  _impl_.digital_crop_state_ = nullptr;
}
void DeviceState::clear_digital_event_mask_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.digital_event_mask_state_ != nullptr) {
    delete _impl_.digital_event_mask_state_;
  }
  _impl_.digital_event_mask_state_ = nullptr;
}
void DeviceState::clear_event_rate_control_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_rate_control_state_ != nullptr) {
    delete _impl_.event_rate_control_state_;
  }
  _impl_.event_rate_control_state_ = nullptr;
}
void DeviceState::clear_event_rate_noise_filter_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_rate_noise_filter_state_ != nullptr) {
    delete _impl_.event_rate_noise_filter_state_;
  }
  _impl_.event_rate_noise_filter_state_ = nullptr;
}
void DeviceState::clear_event_trail_filter_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_trail_filter_state_ != nullptr) {
    delete _impl_.event_trail_filter_state_;
  }
  _impl_.event_trail_filter_state_ = nullptr;
}
void DeviceState::clear_hw_register_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.hw_register_state_ != nullptr) {
    delete _impl_.hw_register_state_;
  }
  _impl_.hw_register_state_ = nullptr;
}
void DeviceState::clear_ll_biases_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.ll_biases_state_ != nullptr) {
    delete _impl_.ll_biases_state_;
  }
  _impl_.ll_biases_state_ = nullptr;
}
void DeviceState::clear_roi_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.roi_state_ != nullptr) {
    delete _impl_.roi_state_;
  }
  _impl_.roi_state_ = nullptr;
}
void DeviceState::clear_trigger_in_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_in_state_ != nullptr) {
    delete _impl_.trigger_in_state_;
  }
  _impl_.trigger_in_state_ = nullptr;
}
void DeviceState::clear_trigger_out_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_out_state_ != nullptr) {
    delete _impl_.trigger_out_state_;
  }
  _impl_.trigger_out_state_ = nullptr;
}
DeviceState::DeviceState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceSerialization.DeviceState)
}
DeviceState::DeviceState(const DeviceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.afk_state_){nullptr}
    , decltype(_impl_.cam_sync_state_){nullptr}
    , decltype(_impl_.digital_crop_state_){nullptr}
    , decltype(_impl_.digital_event_mask_state_){nullptr}
    , decltype(_impl_.event_rate_control_state_){nullptr}
    , decltype(_impl_.event_rate_noise_filter_state_){nullptr}
    , decltype(_impl_.event_trail_filter_state_){nullptr}
    , decltype(_impl_.hw_register_state_){nullptr}
    , decltype(_impl_.ll_biases_state_){nullptr}
    , decltype(_impl_.roi_state_){nullptr}
    , decltype(_impl_.trigger_in_state_){nullptr}
    , decltype(_impl_.trigger_out_state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_afk_state()) {
    _this->_impl_.afk_state_ = new ::DeviceSerialization::AntiflickerState(*from._impl_.afk_state_);
  }
  if (from._internal_has_cam_sync_state()) {
    _this->_impl_.cam_sync_state_ = new ::DeviceSerialization::CameraSynchronizationState(*from._impl_.cam_sync_state_);
  }
  if (from._internal_has_digital_crop_state()) {
    _this->_impl_.digital_crop_state_ = new ::DeviceSerialization::DigitalCropState(*from._impl_.digital_crop_state_);
  }
  if (from._internal_has_digital_event_mask_state()) {
    _this->_impl_.digital_event_mask_state_ = new ::DeviceSerialization::DigitalEventMaskState(*from._impl_.digital_event_mask_state_);
  }
  if (from._internal_has_event_rate_control_state()) {
    _this->_impl_.event_rate_control_state_ = new ::DeviceSerialization::EventRateControlState(*from._impl_.event_rate_control_state_);
  }
  if (from._internal_has_event_rate_noise_filter_state()) {
    _this->_impl_.event_rate_noise_filter_state_ = new ::DeviceSerialization::EventRateNoiseFilterState(*from._impl_.event_rate_noise_filter_state_);
  }
  if (from._internal_has_event_trail_filter_state()) {
    _this->_impl_.event_trail_filter_state_ = new ::DeviceSerialization::EventTrailFilterState(*from._impl_.event_trail_filter_state_);
  }
  if (from._internal_has_hw_register_state()) {
    _this->_impl_.hw_register_state_ = new ::DeviceSerialization::HWRegisterState(*from._impl_.hw_register_state_);
  }
  if (from._internal_has_ll_biases_state()) {
    _this->_impl_.ll_biases_state_ = new ::DeviceSerialization::LLBiasesState(*from._impl_.ll_biases_state_);
  }
  if (from._internal_has_roi_state()) {
    _this->_impl_.roi_state_ = new ::DeviceSerialization::RegionOfInterestState(*from._impl_.roi_state_);
  }
  if (from._internal_has_trigger_in_state()) {
    _this->_impl_.trigger_in_state_ = new ::DeviceSerialization::TriggerInState(*from._impl_.trigger_in_state_);
  }
  if (from._internal_has_trigger_out_state()) {
    _this->_impl_.trigger_out_state_ = new ::DeviceSerialization::TriggerOutState(*from._impl_.trigger_out_state_);
  }
  // @@protoc_insertion_point(copy_constructor:DeviceSerialization.DeviceState)
}

inline void DeviceState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.afk_state_){nullptr}
    , decltype(_impl_.cam_sync_state_){nullptr}
    , decltype(_impl_.digital_crop_state_){nullptr}
    , decltype(_impl_.digital_event_mask_state_){nullptr}
    , decltype(_impl_.event_rate_control_state_){nullptr}
    , decltype(_impl_.event_rate_noise_filter_state_){nullptr}
    , decltype(_impl_.event_trail_filter_state_){nullptr}
    , decltype(_impl_.hw_register_state_){nullptr}
    , decltype(_impl_.ll_biases_state_){nullptr}
    , decltype(_impl_.roi_state_){nullptr}
    , decltype(_impl_.trigger_in_state_){nullptr}
    , decltype(_impl_.trigger_out_state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceState::~DeviceState() {
  // @@protoc_insertion_point(destructor:DeviceSerialization.DeviceState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.afk_state_;
  if (this != internal_default_instance()) delete _impl_.cam_sync_state_;
  if (this != internal_default_instance()) delete _impl_.digital_crop_state_;
  if (this != internal_default_instance()) delete _impl_.digital_event_mask_state_;
  if (this != internal_default_instance()) delete _impl_.event_rate_control_state_;
  if (this != internal_default_instance()) delete _impl_.event_rate_noise_filter_state_;
  if (this != internal_default_instance()) delete _impl_.event_trail_filter_state_;
  if (this != internal_default_instance()) delete _impl_.hw_register_state_;
  if (this != internal_default_instance()) delete _impl_.ll_biases_state_;
  if (this != internal_default_instance()) delete _impl_.roi_state_;
  if (this != internal_default_instance()) delete _impl_.trigger_in_state_;
  if (this != internal_default_instance()) delete _impl_.trigger_out_state_;
}

void DeviceState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceState::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSerialization.DeviceState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.afk_state_ != nullptr) {
    delete _impl_.afk_state_;
  }
  _impl_.afk_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cam_sync_state_ != nullptr) {
    delete _impl_.cam_sync_state_;
  }
  _impl_.cam_sync_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.digital_crop_state_ != nullptr) {
    delete _impl_.digital_crop_state_;
  }
  _impl_.digital_crop_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.digital_event_mask_state_ != nullptr) {
    delete _impl_.digital_event_mask_state_;
  }
  _impl_.digital_event_mask_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.event_rate_control_state_ != nullptr) {
    delete _impl_.event_rate_control_state_;
  }
  _impl_.event_rate_control_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.event_rate_noise_filter_state_ != nullptr) {
    delete _impl_.event_rate_noise_filter_state_;
  }
  _impl_.event_rate_noise_filter_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.event_trail_filter_state_ != nullptr) {
    delete _impl_.event_trail_filter_state_;
  }
  _impl_.event_trail_filter_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hw_register_state_ != nullptr) {
    delete _impl_.hw_register_state_;
  }
  _impl_.hw_register_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ll_biases_state_ != nullptr) {
    delete _impl_.ll_biases_state_;
  }
  _impl_.ll_biases_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.roi_state_ != nullptr) {
    delete _impl_.roi_state_;
  }
  _impl_.roi_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_in_state_ != nullptr) {
    delete _impl_.trigger_in_state_;
  }
  _impl_.trigger_in_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trigger_out_state_ != nullptr) {
    delete _impl_.trigger_out_state_;
  }
  _impl_.trigger_out_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DeviceSerialization.AntiflickerState afk_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_afk_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.CameraSynchronizationState cam_sync_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam_sync_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.DigitalCropState digital_crop_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_digital_crop_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.DigitalEventMaskState digital_event_mask_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_digital_event_mask_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.EventRateControlState event_rate_control_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_rate_control_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.EventRateNoiseFilterState event_rate_noise_filter_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_rate_noise_filter_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.EventTrailFilterState event_trail_filter_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_trail_filter_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.HWRegisterState hw_register_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hw_register_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.LLBiasesState ll_biases_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ll_biases_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.RegionOfInterestState roi_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.TriggerInState trigger_in_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_in_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.TriggerOutState trigger_out_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_out_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSerialization.DeviceState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DeviceSerialization.AntiflickerState afk_state = 1;
  if (this->_internal_has_afk_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::afk_state(this),
        _Internal::afk_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.CameraSynchronizationState cam_sync_state = 2;
  if (this->_internal_has_cam_sync_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cam_sync_state(this),
        _Internal::cam_sync_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.DigitalCropState digital_crop_state = 3;
  if (this->_internal_has_digital_crop_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::digital_crop_state(this),
        _Internal::digital_crop_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.DigitalEventMaskState digital_event_mask_state = 4;
  if (this->_internal_has_digital_event_mask_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::digital_event_mask_state(this),
        _Internal::digital_event_mask_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.EventRateControlState event_rate_control_state = 5;
  if (this->_internal_has_event_rate_control_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::event_rate_control_state(this),
        _Internal::event_rate_control_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.EventRateNoiseFilterState event_rate_noise_filter_state = 6;
  if (this->_internal_has_event_rate_noise_filter_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::event_rate_noise_filter_state(this),
        _Internal::event_rate_noise_filter_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.EventTrailFilterState event_trail_filter_state = 7;
  if (this->_internal_has_event_trail_filter_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::event_trail_filter_state(this),
        _Internal::event_trail_filter_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.HWRegisterState hw_register_state = 8;
  if (this->_internal_has_hw_register_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::hw_register_state(this),
        _Internal::hw_register_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.LLBiasesState ll_biases_state = 9;
  if (this->_internal_has_ll_biases_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ll_biases_state(this),
        _Internal::ll_biases_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.RegionOfInterestState roi_state = 10;
  if (this->_internal_has_roi_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::roi_state(this),
        _Internal::roi_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.TriggerInState trigger_in_state = 11;
  if (this->_internal_has_trigger_in_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::trigger_in_state(this),
        _Internal::trigger_in_state(this).GetCachedSize(), target, stream);
  }

  // .DeviceSerialization.TriggerOutState trigger_out_state = 12;
  if (this->_internal_has_trigger_out_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::trigger_out_state(this),
        _Internal::trigger_out_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSerialization.DeviceState)
  return target;
}

size_t DeviceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSerialization.DeviceState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DeviceSerialization.AntiflickerState afk_state = 1;
  if (this->_internal_has_afk_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.afk_state_);
  }

  // .DeviceSerialization.CameraSynchronizationState cam_sync_state = 2;
  if (this->_internal_has_cam_sync_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cam_sync_state_);
  }

  // .DeviceSerialization.DigitalCropState digital_crop_state = 3;
  if (this->_internal_has_digital_crop_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.digital_crop_state_);
  }

  // .DeviceSerialization.DigitalEventMaskState digital_event_mask_state = 4;
  if (this->_internal_has_digital_event_mask_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.digital_event_mask_state_);
  }

  // .DeviceSerialization.EventRateControlState event_rate_control_state = 5;
  if (this->_internal_has_event_rate_control_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_rate_control_state_);
  }

  // .DeviceSerialization.EventRateNoiseFilterState event_rate_noise_filter_state = 6;
  if (this->_internal_has_event_rate_noise_filter_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_rate_noise_filter_state_);
  }

  // .DeviceSerialization.EventTrailFilterState event_trail_filter_state = 7;
  if (this->_internal_has_event_trail_filter_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_trail_filter_state_);
  }

  // .DeviceSerialization.HWRegisterState hw_register_state = 8;
  if (this->_internal_has_hw_register_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hw_register_state_);
  }

  // .DeviceSerialization.LLBiasesState ll_biases_state = 9;
  if (this->_internal_has_ll_biases_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ll_biases_state_);
  }

  // .DeviceSerialization.RegionOfInterestState roi_state = 10;
  if (this->_internal_has_roi_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roi_state_);
  }

  // .DeviceSerialization.TriggerInState trigger_in_state = 11;
  if (this->_internal_has_trigger_in_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trigger_in_state_);
  }

  // .DeviceSerialization.TriggerOutState trigger_out_state = 12;
  if (this->_internal_has_trigger_out_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trigger_out_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceState::GetClassData() const { return &_class_data_; }


void DeviceState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceState*>(&to_msg);
  auto& from = static_cast<const DeviceState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceSerialization.DeviceState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_afk_state()) {
    _this->_internal_mutable_afk_state()->::DeviceSerialization::AntiflickerState::MergeFrom(
        from._internal_afk_state());
  }
  if (from._internal_has_cam_sync_state()) {
    _this->_internal_mutable_cam_sync_state()->::DeviceSerialization::CameraSynchronizationState::MergeFrom(
        from._internal_cam_sync_state());
  }
  if (from._internal_has_digital_crop_state()) {
    _this->_internal_mutable_digital_crop_state()->::DeviceSerialization::DigitalCropState::MergeFrom(
        from._internal_digital_crop_state());
  }
  if (from._internal_has_digital_event_mask_state()) {
    _this->_internal_mutable_digital_event_mask_state()->::DeviceSerialization::DigitalEventMaskState::MergeFrom(
        from._internal_digital_event_mask_state());
  }
  if (from._internal_has_event_rate_control_state()) {
    _this->_internal_mutable_event_rate_control_state()->::DeviceSerialization::EventRateControlState::MergeFrom(
        from._internal_event_rate_control_state());
  }
  if (from._internal_has_event_rate_noise_filter_state()) {
    _this->_internal_mutable_event_rate_noise_filter_state()->::DeviceSerialization::EventRateNoiseFilterState::MergeFrom(
        from._internal_event_rate_noise_filter_state());
  }
  if (from._internal_has_event_trail_filter_state()) {
    _this->_internal_mutable_event_trail_filter_state()->::DeviceSerialization::EventTrailFilterState::MergeFrom(
        from._internal_event_trail_filter_state());
  }
  if (from._internal_has_hw_register_state()) {
    _this->_internal_mutable_hw_register_state()->::DeviceSerialization::HWRegisterState::MergeFrom(
        from._internal_hw_register_state());
  }
  if (from._internal_has_ll_biases_state()) {
    _this->_internal_mutable_ll_biases_state()->::DeviceSerialization::LLBiasesState::MergeFrom(
        from._internal_ll_biases_state());
  }
  if (from._internal_has_roi_state()) {
    _this->_internal_mutable_roi_state()->::DeviceSerialization::RegionOfInterestState::MergeFrom(
        from._internal_roi_state());
  }
  if (from._internal_has_trigger_in_state()) {
    _this->_internal_mutable_trigger_in_state()->::DeviceSerialization::TriggerInState::MergeFrom(
        from._internal_trigger_in_state());
  }
  if (from._internal_has_trigger_out_state()) {
    _this->_internal_mutable_trigger_out_state()->::DeviceSerialization::TriggerOutState::MergeFrom(
        from._internal_trigger_out_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceState::CopyFrom(const DeviceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSerialization.DeviceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceState::IsInitialized() const {
  return true;
}

void DeviceState::InternalSwap(DeviceState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceState, _impl_.trigger_out_state_)
      + sizeof(DeviceState::_impl_.trigger_out_state_)
      - PROTOBUF_FIELD_OFFSET(DeviceState, _impl_.afk_state_)>(
          reinterpret_cast<char*>(&_impl_.afk_state_),
          reinterpret_cast<char*>(&other->_impl_.afk_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_device_5fstate_2eproto_getter, &descriptor_table_device_5fstate_2eproto_once,
      file_level_metadata_device_5fstate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeviceSerialization::DeviceState*
Arena::CreateMaybeMessage< ::DeviceSerialization::DeviceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceSerialization::DeviceState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
