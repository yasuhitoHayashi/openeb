// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: antiflicker_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_antiflicker_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_antiflicker_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_antiflicker_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_antiflicker_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_antiflicker_5fstate_2eproto;
namespace DeviceSerialization {
class AntiflickerState;
struct AntiflickerStateDefaultTypeInternal;
extern AntiflickerStateDefaultTypeInternal _AntiflickerState_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::AntiflickerState* Arena::CreateMaybeMessage<::DeviceSerialization::AntiflickerState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

enum AntiflickerState_AFKFilteringMode : int {
  AntiflickerState_AFKFilteringMode_BAND_PASS = 0,
  AntiflickerState_AFKFilteringMode_BAND_STOP = 1,
  AntiflickerState_AFKFilteringMode_AntiflickerState_AFKFilteringMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AntiflickerState_AFKFilteringMode_AntiflickerState_AFKFilteringMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AntiflickerState_AFKFilteringMode_IsValid(int value);
constexpr AntiflickerState_AFKFilteringMode AntiflickerState_AFKFilteringMode_AFKFilteringMode_MIN = AntiflickerState_AFKFilteringMode_BAND_PASS;
constexpr AntiflickerState_AFKFilteringMode AntiflickerState_AFKFilteringMode_AFKFilteringMode_MAX = AntiflickerState_AFKFilteringMode_BAND_STOP;
constexpr int AntiflickerState_AFKFilteringMode_AFKFilteringMode_ARRAYSIZE = AntiflickerState_AFKFilteringMode_AFKFilteringMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AntiflickerState_AFKFilteringMode_descriptor();
template<typename T>
inline const std::string& AntiflickerState_AFKFilteringMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AntiflickerState_AFKFilteringMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AntiflickerState_AFKFilteringMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AntiflickerState_AFKFilteringMode_descriptor(), enum_t_value);
}
inline bool AntiflickerState_AFKFilteringMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AntiflickerState_AFKFilteringMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AntiflickerState_AFKFilteringMode>(
    AntiflickerState_AFKFilteringMode_descriptor(), name, value);
}
// ===================================================================

class AntiflickerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.AntiflickerState) */ {
 public:
  inline AntiflickerState() : AntiflickerState(nullptr) {}
  ~AntiflickerState() override;
  explicit PROTOBUF_CONSTEXPR AntiflickerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AntiflickerState(const AntiflickerState& from);
  AntiflickerState(AntiflickerState&& from) noexcept
    : AntiflickerState() {
    *this = ::std::move(from);
  }

  inline AntiflickerState& operator=(const AntiflickerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AntiflickerState& operator=(AntiflickerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AntiflickerState& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalEnabledCase {
    kEnabled = 1,
    OPTIONAL_ENABLED_NOT_SET = 0,
  };

  enum OptionalBandLowFreqCase {
    kBandLowFreq = 2,
    OPTIONAL_BAND_LOW_FREQ_NOT_SET = 0,
  };

  enum OptionalBandHighFreqCase {
    kBandHighFreq = 3,
    OPTIONAL_BAND_HIGH_FREQ_NOT_SET = 0,
  };

  enum OptionalFilteringModeCase {
    kFilteringMode = 4,
    OPTIONAL_FILTERING_MODE_NOT_SET = 0,
  };

  enum OptionalDutyCycleCase {
    kDutyCycle = 5,
    OPTIONAL_DUTY_CYCLE_NOT_SET = 0,
  };

  enum OptionalStartThresholdCase {
    kStartThreshold = 6,
    OPTIONAL_START_THRESHOLD_NOT_SET = 0,
  };

  enum OptionalStopThresholdCase {
    kStopThreshold = 7,
    OPTIONAL_STOP_THRESHOLD_NOT_SET = 0,
  };

  static inline const AntiflickerState* internal_default_instance() {
    return reinterpret_cast<const AntiflickerState*>(
               &_AntiflickerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AntiflickerState& a, AntiflickerState& b) {
    a.Swap(&b);
  }
  inline void Swap(AntiflickerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AntiflickerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AntiflickerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AntiflickerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AntiflickerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AntiflickerState& from) {
    AntiflickerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AntiflickerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.AntiflickerState";
  }
  protected:
  explicit AntiflickerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AntiflickerState_AFKFilteringMode AFKFilteringMode;
  static constexpr AFKFilteringMode BAND_PASS =
    AntiflickerState_AFKFilteringMode_BAND_PASS;
  static constexpr AFKFilteringMode BAND_STOP =
    AntiflickerState_AFKFilteringMode_BAND_STOP;
  static inline bool AFKFilteringMode_IsValid(int value) {
    return AntiflickerState_AFKFilteringMode_IsValid(value);
  }
  static constexpr AFKFilteringMode AFKFilteringMode_MIN =
    AntiflickerState_AFKFilteringMode_AFKFilteringMode_MIN;
  static constexpr AFKFilteringMode AFKFilteringMode_MAX =
    AntiflickerState_AFKFilteringMode_AFKFilteringMode_MAX;
  static constexpr int AFKFilteringMode_ARRAYSIZE =
    AntiflickerState_AFKFilteringMode_AFKFilteringMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AFKFilteringMode_descriptor() {
    return AntiflickerState_AFKFilteringMode_descriptor();
  }
  template<typename T>
  static inline const std::string& AFKFilteringMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AFKFilteringMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AFKFilteringMode_Name.");
    return AntiflickerState_AFKFilteringMode_Name(enum_t_value);
  }
  static inline bool AFKFilteringMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AFKFilteringMode* value) {
    return AntiflickerState_AFKFilteringMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kBandLowFreqFieldNumber = 2,
    kBandHighFreqFieldNumber = 3,
    kFilteringModeFieldNumber = 4,
    kDutyCycleFieldNumber = 5,
    kStartThresholdFieldNumber = 6,
    kStopThresholdFieldNumber = 7,
  };
  // bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 band_low_freq = 2;
  bool has_band_low_freq() const;
  private:
  bool _internal_has_band_low_freq() const;
  public:
  void clear_band_low_freq();
  uint32_t band_low_freq() const;
  void set_band_low_freq(uint32_t value);
  private:
  uint32_t _internal_band_low_freq() const;
  void _internal_set_band_low_freq(uint32_t value);
  public:

  // uint32 band_high_freq = 3;
  bool has_band_high_freq() const;
  private:
  bool _internal_has_band_high_freq() const;
  public:
  void clear_band_high_freq();
  uint32_t band_high_freq() const;
  void set_band_high_freq(uint32_t value);
  private:
  uint32_t _internal_band_high_freq() const;
  void _internal_set_band_high_freq(uint32_t value);
  public:

  // .DeviceSerialization.AntiflickerState.AFKFilteringMode filtering_mode = 4;
  bool has_filtering_mode() const;
  private:
  bool _internal_has_filtering_mode() const;
  public:
  void clear_filtering_mode();
  ::DeviceSerialization::AntiflickerState_AFKFilteringMode filtering_mode() const;
  void set_filtering_mode(::DeviceSerialization::AntiflickerState_AFKFilteringMode value);
  private:
  ::DeviceSerialization::AntiflickerState_AFKFilteringMode _internal_filtering_mode() const;
  void _internal_set_filtering_mode(::DeviceSerialization::AntiflickerState_AFKFilteringMode value);
  public:

  // float duty_cycle = 5;
  bool has_duty_cycle() const;
  private:
  bool _internal_has_duty_cycle() const;
  public:
  void clear_duty_cycle();
  float duty_cycle() const;
  void set_duty_cycle(float value);
  private:
  float _internal_duty_cycle() const;
  void _internal_set_duty_cycle(float value);
  public:

  // uint32 start_threshold = 6;
  bool has_start_threshold() const;
  private:
  bool _internal_has_start_threshold() const;
  public:
  void clear_start_threshold();
  uint32_t start_threshold() const;
  void set_start_threshold(uint32_t value);
  private:
  uint32_t _internal_start_threshold() const;
  void _internal_set_start_threshold(uint32_t value);
  public:

  // uint32 stop_threshold = 7;
  bool has_stop_threshold() const;
  private:
  bool _internal_has_stop_threshold() const;
  public:
  void clear_stop_threshold();
  uint32_t stop_threshold() const;
  void set_stop_threshold(uint32_t value);
  private:
  uint32_t _internal_stop_threshold() const;
  void _internal_set_stop_threshold(uint32_t value);
  public:

  void clear_optional_enabled();
  OptionalEnabledCase optional_enabled_case() const;
  void clear_optional_band_low_freq();
  OptionalBandLowFreqCase optional_band_low_freq_case() const;
  void clear_optional_band_high_freq();
  OptionalBandHighFreqCase optional_band_high_freq_case() const;
  void clear_optional_filtering_mode();
  OptionalFilteringModeCase optional_filtering_mode_case() const;
  void clear_optional_duty_cycle();
  OptionalDutyCycleCase optional_duty_cycle_case() const;
  void clear_optional_start_threshold();
  OptionalStartThresholdCase optional_start_threshold_case() const;
  void clear_optional_stop_threshold();
  OptionalStopThresholdCase optional_stop_threshold_case() const;
  // @@protoc_insertion_point(class_scope:DeviceSerialization.AntiflickerState)
 private:
  class _Internal;
  void set_has_enabled();
  void set_has_band_low_freq();
  void set_has_band_high_freq();
  void set_has_filtering_mode();
  void set_has_duty_cycle();
  void set_has_start_threshold();
  void set_has_stop_threshold();

  inline bool has_optional_enabled() const;
  inline void clear_has_optional_enabled();

  inline bool has_optional_band_low_freq() const;
  inline void clear_has_optional_band_low_freq();

  inline bool has_optional_band_high_freq() const;
  inline void clear_has_optional_band_high_freq();

  inline bool has_optional_filtering_mode() const;
  inline void clear_has_optional_filtering_mode();

  inline bool has_optional_duty_cycle() const;
  inline void clear_has_optional_duty_cycle();

  inline bool has_optional_start_threshold() const;
  inline void clear_has_optional_start_threshold();

  inline bool has_optional_stop_threshold() const;
  inline void clear_has_optional_stop_threshold();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionalEnabledUnion {
      constexpr OptionalEnabledUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool enabled_;
    } optional_enabled_;
    union OptionalBandLowFreqUnion {
      constexpr OptionalBandLowFreqUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t band_low_freq_;
    } optional_band_low_freq_;
    union OptionalBandHighFreqUnion {
      constexpr OptionalBandHighFreqUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t band_high_freq_;
    } optional_band_high_freq_;
    union OptionalFilteringModeUnion {
      constexpr OptionalFilteringModeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int filtering_mode_;
    } optional_filtering_mode_;
    union OptionalDutyCycleUnion {
      constexpr OptionalDutyCycleUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float duty_cycle_;
    } optional_duty_cycle_;
    union OptionalStartThresholdUnion {
      constexpr OptionalStartThresholdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t start_threshold_;
    } optional_start_threshold_;
    union OptionalStopThresholdUnion {
      constexpr OptionalStopThresholdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t stop_threshold_;
    } optional_stop_threshold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[7];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_antiflicker_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AntiflickerState

// bool enabled = 1;
inline bool AntiflickerState::_internal_has_enabled() const {
  return optional_enabled_case() == kEnabled;
}
inline bool AntiflickerState::has_enabled() const {
  return _internal_has_enabled();
}
inline void AntiflickerState::set_has_enabled() {
  _impl_._oneof_case_[0] = kEnabled;
}
inline void AntiflickerState::clear_enabled() {
  if (_internal_has_enabled()) {
    _impl_.optional_enabled_.enabled_ = false;
    clear_has_optional_enabled();
  }
}
inline bool AntiflickerState::_internal_enabled() const {
  if (_internal_has_enabled()) {
    return _impl_.optional_enabled_.enabled_;
  }
  return false;
}
inline void AntiflickerState::_internal_set_enabled(bool value) {
  if (!_internal_has_enabled()) {
    clear_optional_enabled();
    set_has_enabled();
  }
  _impl_.optional_enabled_.enabled_ = value;
}
inline bool AntiflickerState::enabled() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.AntiflickerState.enabled)
  return _internal_enabled();
}
inline void AntiflickerState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.AntiflickerState.enabled)
}

// uint32 band_low_freq = 2;
inline bool AntiflickerState::_internal_has_band_low_freq() const {
  return optional_band_low_freq_case() == kBandLowFreq;
}
inline bool AntiflickerState::has_band_low_freq() const {
  return _internal_has_band_low_freq();
}
inline void AntiflickerState::set_has_band_low_freq() {
  _impl_._oneof_case_[1] = kBandLowFreq;
}
inline void AntiflickerState::clear_band_low_freq() {
  if (_internal_has_band_low_freq()) {
    _impl_.optional_band_low_freq_.band_low_freq_ = 0u;
    clear_has_optional_band_low_freq();
  }
}
inline uint32_t AntiflickerState::_internal_band_low_freq() const {
  if (_internal_has_band_low_freq()) {
    return _impl_.optional_band_low_freq_.band_low_freq_;
  }
  return 0u;
}
inline void AntiflickerState::_internal_set_band_low_freq(uint32_t value) {
  if (!_internal_has_band_low_freq()) {
    clear_optional_band_low_freq();
    set_has_band_low_freq();
  }
  _impl_.optional_band_low_freq_.band_low_freq_ = value;
}
inline uint32_t AntiflickerState::band_low_freq() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.AntiflickerState.band_low_freq)
  return _internal_band_low_freq();
}
inline void AntiflickerState::set_band_low_freq(uint32_t value) {
  _internal_set_band_low_freq(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.AntiflickerState.band_low_freq)
}

// uint32 band_high_freq = 3;
inline bool AntiflickerState::_internal_has_band_high_freq() const {
  return optional_band_high_freq_case() == kBandHighFreq;
}
inline bool AntiflickerState::has_band_high_freq() const {
  return _internal_has_band_high_freq();
}
inline void AntiflickerState::set_has_band_high_freq() {
  _impl_._oneof_case_[2] = kBandHighFreq;
}
inline void AntiflickerState::clear_band_high_freq() {
  if (_internal_has_band_high_freq()) {
    _impl_.optional_band_high_freq_.band_high_freq_ = 0u;
    clear_has_optional_band_high_freq();
  }
}
inline uint32_t AntiflickerState::_internal_band_high_freq() const {
  if (_internal_has_band_high_freq()) {
    return _impl_.optional_band_high_freq_.band_high_freq_;
  }
  return 0u;
}
inline void AntiflickerState::_internal_set_band_high_freq(uint32_t value) {
  if (!_internal_has_band_high_freq()) {
    clear_optional_band_high_freq();
    set_has_band_high_freq();
  }
  _impl_.optional_band_high_freq_.band_high_freq_ = value;
}
inline uint32_t AntiflickerState::band_high_freq() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.AntiflickerState.band_high_freq)
  return _internal_band_high_freq();
}
inline void AntiflickerState::set_band_high_freq(uint32_t value) {
  _internal_set_band_high_freq(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.AntiflickerState.band_high_freq)
}

// .DeviceSerialization.AntiflickerState.AFKFilteringMode filtering_mode = 4;
inline bool AntiflickerState::_internal_has_filtering_mode() const {
  return optional_filtering_mode_case() == kFilteringMode;
}
inline bool AntiflickerState::has_filtering_mode() const {
  return _internal_has_filtering_mode();
}
inline void AntiflickerState::set_has_filtering_mode() {
  _impl_._oneof_case_[3] = kFilteringMode;
}
inline void AntiflickerState::clear_filtering_mode() {
  if (_internal_has_filtering_mode()) {
    _impl_.optional_filtering_mode_.filtering_mode_ = 0;
    clear_has_optional_filtering_mode();
  }
}
inline ::DeviceSerialization::AntiflickerState_AFKFilteringMode AntiflickerState::_internal_filtering_mode() const {
  if (_internal_has_filtering_mode()) {
    return static_cast< ::DeviceSerialization::AntiflickerState_AFKFilteringMode >(_impl_.optional_filtering_mode_.filtering_mode_);
  }
  return static_cast< ::DeviceSerialization::AntiflickerState_AFKFilteringMode >(0);
}
inline ::DeviceSerialization::AntiflickerState_AFKFilteringMode AntiflickerState::filtering_mode() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.AntiflickerState.filtering_mode)
  return _internal_filtering_mode();
}
inline void AntiflickerState::_internal_set_filtering_mode(::DeviceSerialization::AntiflickerState_AFKFilteringMode value) {
  if (!_internal_has_filtering_mode()) {
    clear_optional_filtering_mode();
    set_has_filtering_mode();
  }
  _impl_.optional_filtering_mode_.filtering_mode_ = value;
}
inline void AntiflickerState::set_filtering_mode(::DeviceSerialization::AntiflickerState_AFKFilteringMode value) {
  _internal_set_filtering_mode(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.AntiflickerState.filtering_mode)
}

// float duty_cycle = 5;
inline bool AntiflickerState::_internal_has_duty_cycle() const {
  return optional_duty_cycle_case() == kDutyCycle;
}
inline bool AntiflickerState::has_duty_cycle() const {
  return _internal_has_duty_cycle();
}
inline void AntiflickerState::set_has_duty_cycle() {
  _impl_._oneof_case_[4] = kDutyCycle;
}
inline void AntiflickerState::clear_duty_cycle() {
  if (_internal_has_duty_cycle()) {
    _impl_.optional_duty_cycle_.duty_cycle_ = 0;
    clear_has_optional_duty_cycle();
  }
}
inline float AntiflickerState::_internal_duty_cycle() const {
  if (_internal_has_duty_cycle()) {
    return _impl_.optional_duty_cycle_.duty_cycle_;
  }
  return 0;
}
inline void AntiflickerState::_internal_set_duty_cycle(float value) {
  if (!_internal_has_duty_cycle()) {
    clear_optional_duty_cycle();
    set_has_duty_cycle();
  }
  _impl_.optional_duty_cycle_.duty_cycle_ = value;
}
inline float AntiflickerState::duty_cycle() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.AntiflickerState.duty_cycle)
  return _internal_duty_cycle();
}
inline void AntiflickerState::set_duty_cycle(float value) {
  _internal_set_duty_cycle(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.AntiflickerState.duty_cycle)
}

// uint32 start_threshold = 6;
inline bool AntiflickerState::_internal_has_start_threshold() const {
  return optional_start_threshold_case() == kStartThreshold;
}
inline bool AntiflickerState::has_start_threshold() const {
  return _internal_has_start_threshold();
}
inline void AntiflickerState::set_has_start_threshold() {
  _impl_._oneof_case_[5] = kStartThreshold;
}
inline void AntiflickerState::clear_start_threshold() {
  if (_internal_has_start_threshold()) {
    _impl_.optional_start_threshold_.start_threshold_ = 0u;
    clear_has_optional_start_threshold();
  }
}
inline uint32_t AntiflickerState::_internal_start_threshold() const {
  if (_internal_has_start_threshold()) {
    return _impl_.optional_start_threshold_.start_threshold_;
  }
  return 0u;
}
inline void AntiflickerState::_internal_set_start_threshold(uint32_t value) {
  if (!_internal_has_start_threshold()) {
    clear_optional_start_threshold();
    set_has_start_threshold();
  }
  _impl_.optional_start_threshold_.start_threshold_ = value;
}
inline uint32_t AntiflickerState::start_threshold() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.AntiflickerState.start_threshold)
  return _internal_start_threshold();
}
inline void AntiflickerState::set_start_threshold(uint32_t value) {
  _internal_set_start_threshold(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.AntiflickerState.start_threshold)
}

// uint32 stop_threshold = 7;
inline bool AntiflickerState::_internal_has_stop_threshold() const {
  return optional_stop_threshold_case() == kStopThreshold;
}
inline bool AntiflickerState::has_stop_threshold() const {
  return _internal_has_stop_threshold();
}
inline void AntiflickerState::set_has_stop_threshold() {
  _impl_._oneof_case_[6] = kStopThreshold;
}
inline void AntiflickerState::clear_stop_threshold() {
  if (_internal_has_stop_threshold()) {
    _impl_.optional_stop_threshold_.stop_threshold_ = 0u;
    clear_has_optional_stop_threshold();
  }
}
inline uint32_t AntiflickerState::_internal_stop_threshold() const {
  if (_internal_has_stop_threshold()) {
    return _impl_.optional_stop_threshold_.stop_threshold_;
  }
  return 0u;
}
inline void AntiflickerState::_internal_set_stop_threshold(uint32_t value) {
  if (!_internal_has_stop_threshold()) {
    clear_optional_stop_threshold();
    set_has_stop_threshold();
  }
  _impl_.optional_stop_threshold_.stop_threshold_ = value;
}
inline uint32_t AntiflickerState::stop_threshold() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.AntiflickerState.stop_threshold)
  return _internal_stop_threshold();
}
inline void AntiflickerState::set_stop_threshold(uint32_t value) {
  _internal_set_stop_threshold(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.AntiflickerState.stop_threshold)
}

inline bool AntiflickerState::has_optional_enabled() const {
  return optional_enabled_case() != OPTIONAL_ENABLED_NOT_SET;
}
inline void AntiflickerState::clear_has_optional_enabled() {
  _impl_._oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}
inline bool AntiflickerState::has_optional_band_low_freq() const {
  return optional_band_low_freq_case() != OPTIONAL_BAND_LOW_FREQ_NOT_SET;
}
inline void AntiflickerState::clear_has_optional_band_low_freq() {
  _impl_._oneof_case_[1] = OPTIONAL_BAND_LOW_FREQ_NOT_SET;
}
inline bool AntiflickerState::has_optional_band_high_freq() const {
  return optional_band_high_freq_case() != OPTIONAL_BAND_HIGH_FREQ_NOT_SET;
}
inline void AntiflickerState::clear_has_optional_band_high_freq() {
  _impl_._oneof_case_[2] = OPTIONAL_BAND_HIGH_FREQ_NOT_SET;
}
inline bool AntiflickerState::has_optional_filtering_mode() const {
  return optional_filtering_mode_case() != OPTIONAL_FILTERING_MODE_NOT_SET;
}
inline void AntiflickerState::clear_has_optional_filtering_mode() {
  _impl_._oneof_case_[3] = OPTIONAL_FILTERING_MODE_NOT_SET;
}
inline bool AntiflickerState::has_optional_duty_cycle() const {
  return optional_duty_cycle_case() != OPTIONAL_DUTY_CYCLE_NOT_SET;
}
inline void AntiflickerState::clear_has_optional_duty_cycle() {
  _impl_._oneof_case_[4] = OPTIONAL_DUTY_CYCLE_NOT_SET;
}
inline bool AntiflickerState::has_optional_start_threshold() const {
  return optional_start_threshold_case() != OPTIONAL_START_THRESHOLD_NOT_SET;
}
inline void AntiflickerState::clear_has_optional_start_threshold() {
  _impl_._oneof_case_[5] = OPTIONAL_START_THRESHOLD_NOT_SET;
}
inline bool AntiflickerState::has_optional_stop_threshold() const {
  return optional_stop_threshold_case() != OPTIONAL_STOP_THRESHOLD_NOT_SET;
}
inline void AntiflickerState::clear_has_optional_stop_threshold() {
  _impl_._oneof_case_[6] = OPTIONAL_STOP_THRESHOLD_NOT_SET;
}
inline AntiflickerState::OptionalEnabledCase AntiflickerState::optional_enabled_case() const {
  return AntiflickerState::OptionalEnabledCase(_impl_._oneof_case_[0]);
}
inline AntiflickerState::OptionalBandLowFreqCase AntiflickerState::optional_band_low_freq_case() const {
  return AntiflickerState::OptionalBandLowFreqCase(_impl_._oneof_case_[1]);
}
inline AntiflickerState::OptionalBandHighFreqCase AntiflickerState::optional_band_high_freq_case() const {
  return AntiflickerState::OptionalBandHighFreqCase(_impl_._oneof_case_[2]);
}
inline AntiflickerState::OptionalFilteringModeCase AntiflickerState::optional_filtering_mode_case() const {
  return AntiflickerState::OptionalFilteringModeCase(_impl_._oneof_case_[3]);
}
inline AntiflickerState::OptionalDutyCycleCase AntiflickerState::optional_duty_cycle_case() const {
  return AntiflickerState::OptionalDutyCycleCase(_impl_._oneof_case_[4]);
}
inline AntiflickerState::OptionalStartThresholdCase AntiflickerState::optional_start_threshold_case() const {
  return AntiflickerState::OptionalStartThresholdCase(_impl_._oneof_case_[5]);
}
inline AntiflickerState::OptionalStopThresholdCase AntiflickerState::optional_stop_threshold_case() const {
  return AntiflickerState::OptionalStopThresholdCase(_impl_._oneof_case_[6]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DeviceSerialization::AntiflickerState_AFKFilteringMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceSerialization::AntiflickerState_AFKFilteringMode>() {
  return ::DeviceSerialization::AntiflickerState_AFKFilteringMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_antiflicker_5fstate_2eproto
