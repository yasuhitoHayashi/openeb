// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trigger_out_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trigger_5fout_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trigger_5fout_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trigger_5fout_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trigger_5fout_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trigger_5fout_5fstate_2eproto;
namespace DeviceSerialization {
class TriggerOutState;
struct TriggerOutStateDefaultTypeInternal;
extern TriggerOutStateDefaultTypeInternal _TriggerOutState_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::TriggerOutState* Arena::CreateMaybeMessage<::DeviceSerialization::TriggerOutState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

// ===================================================================

class TriggerOutState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.TriggerOutState) */ {
 public:
  inline TriggerOutState() : TriggerOutState(nullptr) {}
  ~TriggerOutState() override;
  explicit PROTOBUF_CONSTEXPR TriggerOutState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TriggerOutState(const TriggerOutState& from);
  TriggerOutState(TriggerOutState&& from) noexcept
    : TriggerOutState() {
    *this = ::std::move(from);
  }

  inline TriggerOutState& operator=(const TriggerOutState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerOutState& operator=(TriggerOutState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TriggerOutState& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalEnabledCase {
    kEnabled = 1,
    OPTIONAL_ENABLED_NOT_SET = 0,
  };

  enum OptionalPeriodCase {
    kPeriod = 2,
    OPTIONAL_PERIOD_NOT_SET = 0,
  };

  enum OptionalDutyCycleCase {
    kDutyCycle = 3,
    OPTIONAL_DUTY_CYCLE_NOT_SET = 0,
  };

  static inline const TriggerOutState* internal_default_instance() {
    return reinterpret_cast<const TriggerOutState*>(
               &_TriggerOutState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TriggerOutState& a, TriggerOutState& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerOutState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerOutState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TriggerOutState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TriggerOutState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TriggerOutState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TriggerOutState& from) {
    TriggerOutState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerOutState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.TriggerOutState";
  }
  protected:
  explicit TriggerOutState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kDutyCycleFieldNumber = 3,
  };
  // bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 period = 2;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  uint32_t period() const;
  void set_period(uint32_t value);
  private:
  uint32_t _internal_period() const;
  void _internal_set_period(uint32_t value);
  public:

  // double duty_cycle = 3;
  bool has_duty_cycle() const;
  private:
  bool _internal_has_duty_cycle() const;
  public:
  void clear_duty_cycle();
  double duty_cycle() const;
  void set_duty_cycle(double value);
  private:
  double _internal_duty_cycle() const;
  void _internal_set_duty_cycle(double value);
  public:

  void clear_optional_enabled();
  OptionalEnabledCase optional_enabled_case() const;
  void clear_optional_period();
  OptionalPeriodCase optional_period_case() const;
  void clear_optional_duty_cycle();
  OptionalDutyCycleCase optional_duty_cycle_case() const;
  // @@protoc_insertion_point(class_scope:DeviceSerialization.TriggerOutState)
 private:
  class _Internal;
  void set_has_enabled();
  void set_has_period();
  void set_has_duty_cycle();

  inline bool has_optional_enabled() const;
  inline void clear_has_optional_enabled();

  inline bool has_optional_period() const;
  inline void clear_has_optional_period();

  inline bool has_optional_duty_cycle() const;
  inline void clear_has_optional_duty_cycle();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionalEnabledUnion {
      constexpr OptionalEnabledUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool enabled_;
    } optional_enabled_;
    union OptionalPeriodUnion {
      constexpr OptionalPeriodUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t period_;
    } optional_period_;
    union OptionalDutyCycleUnion {
      constexpr OptionalDutyCycleUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double duty_cycle_;
    } optional_duty_cycle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trigger_5fout_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TriggerOutState

// bool enabled = 1;
inline bool TriggerOutState::_internal_has_enabled() const {
  return optional_enabled_case() == kEnabled;
}
inline bool TriggerOutState::has_enabled() const {
  return _internal_has_enabled();
}
inline void TriggerOutState::set_has_enabled() {
  _impl_._oneof_case_[0] = kEnabled;
}
inline void TriggerOutState::clear_enabled() {
  if (_internal_has_enabled()) {
    _impl_.optional_enabled_.enabled_ = false;
    clear_has_optional_enabled();
  }
}
inline bool TriggerOutState::_internal_enabled() const {
  if (_internal_has_enabled()) {
    return _impl_.optional_enabled_.enabled_;
  }
  return false;
}
inline void TriggerOutState::_internal_set_enabled(bool value) {
  if (!_internal_has_enabled()) {
    clear_optional_enabled();
    set_has_enabled();
  }
  _impl_.optional_enabled_.enabled_ = value;
}
inline bool TriggerOutState::enabled() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.TriggerOutState.enabled)
  return _internal_enabled();
}
inline void TriggerOutState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.TriggerOutState.enabled)
}

// uint32 period = 2;
inline bool TriggerOutState::_internal_has_period() const {
  return optional_period_case() == kPeriod;
}
inline bool TriggerOutState::has_period() const {
  return _internal_has_period();
}
inline void TriggerOutState::set_has_period() {
  _impl_._oneof_case_[1] = kPeriod;
}
inline void TriggerOutState::clear_period() {
  if (_internal_has_period()) {
    _impl_.optional_period_.period_ = 0u;
    clear_has_optional_period();
  }
}
inline uint32_t TriggerOutState::_internal_period() const {
  if (_internal_has_period()) {
    return _impl_.optional_period_.period_;
  }
  return 0u;
}
inline void TriggerOutState::_internal_set_period(uint32_t value) {
  if (!_internal_has_period()) {
    clear_optional_period();
    set_has_period();
  }
  _impl_.optional_period_.period_ = value;
}
inline uint32_t TriggerOutState::period() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.TriggerOutState.period)
  return _internal_period();
}
inline void TriggerOutState::set_period(uint32_t value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.TriggerOutState.period)
}

// double duty_cycle = 3;
inline bool TriggerOutState::_internal_has_duty_cycle() const {
  return optional_duty_cycle_case() == kDutyCycle;
}
inline bool TriggerOutState::has_duty_cycle() const {
  return _internal_has_duty_cycle();
}
inline void TriggerOutState::set_has_duty_cycle() {
  _impl_._oneof_case_[2] = kDutyCycle;
}
inline void TriggerOutState::clear_duty_cycle() {
  if (_internal_has_duty_cycle()) {
    _impl_.optional_duty_cycle_.duty_cycle_ = 0;
    clear_has_optional_duty_cycle();
  }
}
inline double TriggerOutState::_internal_duty_cycle() const {
  if (_internal_has_duty_cycle()) {
    return _impl_.optional_duty_cycle_.duty_cycle_;
  }
  return 0;
}
inline void TriggerOutState::_internal_set_duty_cycle(double value) {
  if (!_internal_has_duty_cycle()) {
    clear_optional_duty_cycle();
    set_has_duty_cycle();
  }
  _impl_.optional_duty_cycle_.duty_cycle_ = value;
}
inline double TriggerOutState::duty_cycle() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.TriggerOutState.duty_cycle)
  return _internal_duty_cycle();
}
inline void TriggerOutState::set_duty_cycle(double value) {
  _internal_set_duty_cycle(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.TriggerOutState.duty_cycle)
}

inline bool TriggerOutState::has_optional_enabled() const {
  return optional_enabled_case() != OPTIONAL_ENABLED_NOT_SET;
}
inline void TriggerOutState::clear_has_optional_enabled() {
  _impl_._oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}
inline bool TriggerOutState::has_optional_period() const {
  return optional_period_case() != OPTIONAL_PERIOD_NOT_SET;
}
inline void TriggerOutState::clear_has_optional_period() {
  _impl_._oneof_case_[1] = OPTIONAL_PERIOD_NOT_SET;
}
inline bool TriggerOutState::has_optional_duty_cycle() const {
  return optional_duty_cycle_case() != OPTIONAL_DUTY_CYCLE_NOT_SET;
}
inline void TriggerOutState::clear_has_optional_duty_cycle() {
  _impl_._oneof_case_[2] = OPTIONAL_DUTY_CYCLE_NOT_SET;
}
inline TriggerOutState::OptionalEnabledCase TriggerOutState::optional_enabled_case() const {
  return TriggerOutState::OptionalEnabledCase(_impl_._oneof_case_[0]);
}
inline TriggerOutState::OptionalPeriodCase TriggerOutState::optional_period_case() const {
  return TriggerOutState::OptionalPeriodCase(_impl_._oneof_case_[1]);
}
inline TriggerOutState::OptionalDutyCycleCase TriggerOutState::optional_duty_cycle_case() const {
  return TriggerOutState::OptionalDutyCycleCase(_impl_._oneof_case_[2]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trigger_5fout_5fstate_2eproto
