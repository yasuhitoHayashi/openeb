// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hw_register_state.proto

#include "hw_register_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DeviceSerialization {
PROTOBUF_CONSTEXPR HWRegisterState_NumAccess::HWRegisterState_NumAccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/0u
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HWRegisterState_NumAccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HWRegisterState_NumAccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HWRegisterState_NumAccessDefaultTypeInternal() {}
  union {
    HWRegisterState_NumAccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HWRegisterState_NumAccessDefaultTypeInternal _HWRegisterState_NumAccess_default_instance_;
PROTOBUF_CONSTEXPR HWRegisterState_StringAccess::HWRegisterState_StringAccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HWRegisterState_StringAccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HWRegisterState_StringAccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HWRegisterState_StringAccessDefaultTypeInternal() {}
  union {
    HWRegisterState_StringAccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HWRegisterState_StringAccessDefaultTypeInternal _HWRegisterState_StringAccess_default_instance_;
PROTOBUF_CONSTEXPR HWRegisterState_BitFieldAccess::HWRegisterState_BitFieldAccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bitfield_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HWRegisterState_BitFieldAccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HWRegisterState_BitFieldAccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HWRegisterState_BitFieldAccessDefaultTypeInternal() {}
  union {
    HWRegisterState_BitFieldAccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HWRegisterState_BitFieldAccessDefaultTypeInternal _HWRegisterState_BitFieldAccess_default_instance_;
PROTOBUF_CONSTEXPR HWRegisterState::HWRegisterState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_access_)*/{}
  , /*decltype(_impl_.str_access_)*/{}
  , /*decltype(_impl_.bitfield_access_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HWRegisterStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HWRegisterStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HWRegisterStateDefaultTypeInternal() {}
  union {
    HWRegisterState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HWRegisterStateDefaultTypeInternal _HWRegisterState_default_instance_;
}  // namespace DeviceSerialization
static ::_pb::Metadata file_level_metadata_hw_5fregister_5fstate_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_hw_5fregister_5fstate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_hw_5fregister_5fstate_2eproto = nullptr;

const uint32_t TableStruct_hw_5fregister_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_NumAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_NumAccess, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_NumAccess, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_StringAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_StringAccess, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_StringAccess, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_BitFieldAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_BitFieldAccess, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_BitFieldAccess, _impl_.bitfield_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState_BitFieldAccess, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState, _impl_.num_access_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState, _impl_.str_access_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::HWRegisterState, _impl_.bitfield_access_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DeviceSerialization::HWRegisterState_NumAccess)},
  { 8, -1, -1, sizeof(::DeviceSerialization::HWRegisterState_StringAccess)},
  { 16, -1, -1, sizeof(::DeviceSerialization::HWRegisterState_BitFieldAccess)},
  { 25, -1, -1, sizeof(::DeviceSerialization::HWRegisterState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DeviceSerialization::_HWRegisterState_NumAccess_default_instance_._instance,
  &::DeviceSerialization::_HWRegisterState_StringAccess_default_instance_._instance,
  &::DeviceSerialization::_HWRegisterState_BitFieldAccess_default_instance_._instance,
  &::DeviceSerialization::_HWRegisterState_default_instance_._instance,
};

const char descriptor_table_protodef_hw_5fregister_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027hw_register_state.proto\022\023DeviceSeriali"
  "zation\"\213\003\n\017HWRegisterState\022B\n\nnum_access"
  "\030\001 \003(\0132..DeviceSerialization.HWRegisterS"
  "tate.NumAccess\022E\n\nstr_access\030\002 \003(\01321.Dev"
  "iceSerialization.HWRegisterState.StringA"
  "ccess\022L\n\017bitfield_access\030\003 \003(\01323.DeviceS"
  "erialization.HWRegisterState.BitFieldAcc"
  "ess\032+\n\tNumAccess\022\017\n\007address\030\001 \001(\r\022\r\n\005val"
  "ue\030\002 \001(\r\032.\n\014StringAccess\022\017\n\007address\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\r\032B\n\016BitFieldAccess\022\017\n\007ad"
  "dress\030\001 \001(\t\022\020\n\010bitfield\030\002 \001(\t\022\r\n\005value\030\003"
  " \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_hw_5fregister_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hw_5fregister_5fstate_2eproto = {
    false, false, 452, descriptor_table_protodef_hw_5fregister_5fstate_2eproto,
    "hw_register_state.proto",
    &descriptor_table_hw_5fregister_5fstate_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_hw_5fregister_5fstate_2eproto::offsets,
    file_level_metadata_hw_5fregister_5fstate_2eproto, file_level_enum_descriptors_hw_5fregister_5fstate_2eproto,
    file_level_service_descriptors_hw_5fregister_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hw_5fregister_5fstate_2eproto_getter() {
  return &descriptor_table_hw_5fregister_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hw_5fregister_5fstate_2eproto(&descriptor_table_hw_5fregister_5fstate_2eproto);
namespace DeviceSerialization {

// ===================================================================

class HWRegisterState_NumAccess::_Internal {
 public:
};

HWRegisterState_NumAccess::HWRegisterState_NumAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceSerialization.HWRegisterState.NumAccess)
}
HWRegisterState_NumAccess::HWRegisterState_NumAccess(const HWRegisterState_NumAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HWRegisterState_NumAccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.address_, &from._impl_.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:DeviceSerialization.HWRegisterState.NumAccess)
}

inline void HWRegisterState_NumAccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){0u}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HWRegisterState_NumAccess::~HWRegisterState_NumAccess() {
  // @@protoc_insertion_point(destructor:DeviceSerialization.HWRegisterState.NumAccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HWRegisterState_NumAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HWRegisterState_NumAccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HWRegisterState_NumAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSerialization.HWRegisterState.NumAccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWRegisterState_NumAccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HWRegisterState_NumAccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSerialization.HWRegisterState.NumAccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSerialization.HWRegisterState.NumAccess)
  return target;
}

size_t HWRegisterState_NumAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSerialization.HWRegisterState.NumAccess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_address());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HWRegisterState_NumAccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HWRegisterState_NumAccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HWRegisterState_NumAccess::GetClassData() const { return &_class_data_; }


void HWRegisterState_NumAccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HWRegisterState_NumAccess*>(&to_msg);
  auto& from = static_cast<const HWRegisterState_NumAccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceSerialization.HWRegisterState.NumAccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HWRegisterState_NumAccess::CopyFrom(const HWRegisterState_NumAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSerialization.HWRegisterState.NumAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWRegisterState_NumAccess::IsInitialized() const {
  return true;
}

void HWRegisterState_NumAccess::InternalSwap(HWRegisterState_NumAccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HWRegisterState_NumAccess, _impl_.value_)
      + sizeof(HWRegisterState_NumAccess::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(HWRegisterState_NumAccess, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HWRegisterState_NumAccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hw_5fregister_5fstate_2eproto_getter, &descriptor_table_hw_5fregister_5fstate_2eproto_once,
      file_level_metadata_hw_5fregister_5fstate_2eproto[0]);
}

// ===================================================================

class HWRegisterState_StringAccess::_Internal {
 public:
};

HWRegisterState_StringAccess::HWRegisterState_StringAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceSerialization.HWRegisterState.StringAccess)
}
HWRegisterState_StringAccess::HWRegisterState_StringAccess(const HWRegisterState_StringAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HWRegisterState_StringAccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:DeviceSerialization.HWRegisterState.StringAccess)
}

inline void HWRegisterState_StringAccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HWRegisterState_StringAccess::~HWRegisterState_StringAccess() {
  // @@protoc_insertion_point(destructor:DeviceSerialization.HWRegisterState.StringAccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HWRegisterState_StringAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void HWRegisterState_StringAccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HWRegisterState_StringAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSerialization.HWRegisterState.StringAccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWRegisterState_StringAccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceSerialization.HWRegisterState.StringAccess.address"));
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HWRegisterState_StringAccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSerialization.HWRegisterState.StringAccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceSerialization.HWRegisterState.StringAccess.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSerialization.HWRegisterState.StringAccess)
  return target;
}

size_t HWRegisterState_StringAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSerialization.HWRegisterState.StringAccess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HWRegisterState_StringAccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HWRegisterState_StringAccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HWRegisterState_StringAccess::GetClassData() const { return &_class_data_; }


void HWRegisterState_StringAccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HWRegisterState_StringAccess*>(&to_msg);
  auto& from = static_cast<const HWRegisterState_StringAccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceSerialization.HWRegisterState.StringAccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HWRegisterState_StringAccess::CopyFrom(const HWRegisterState_StringAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSerialization.HWRegisterState.StringAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWRegisterState_StringAccess::IsInitialized() const {
  return true;
}

void HWRegisterState_StringAccess::InternalSwap(HWRegisterState_StringAccess* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HWRegisterState_StringAccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hw_5fregister_5fstate_2eproto_getter, &descriptor_table_hw_5fregister_5fstate_2eproto_once,
      file_level_metadata_hw_5fregister_5fstate_2eproto[1]);
}

// ===================================================================

class HWRegisterState_BitFieldAccess::_Internal {
 public:
};

HWRegisterState_BitFieldAccess::HWRegisterState_BitFieldAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceSerialization.HWRegisterState.BitFieldAccess)
}
HWRegisterState_BitFieldAccess::HWRegisterState_BitFieldAccess(const HWRegisterState_BitFieldAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HWRegisterState_BitFieldAccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.bitfield_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bitfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bitfield_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bitfield().empty()) {
    _this->_impl_.bitfield_.Set(from._internal_bitfield(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:DeviceSerialization.HWRegisterState.BitFieldAccess)
}

inline void HWRegisterState_BitFieldAccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.bitfield_){}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bitfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bitfield_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HWRegisterState_BitFieldAccess::~HWRegisterState_BitFieldAccess() {
  // @@protoc_insertion_point(destructor:DeviceSerialization.HWRegisterState.BitFieldAccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HWRegisterState_BitFieldAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.bitfield_.Destroy();
}

void HWRegisterState_BitFieldAccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HWRegisterState_BitFieldAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSerialization.HWRegisterState.BitFieldAccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.bitfield_.ClearToEmpty();
  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWRegisterState_BitFieldAccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceSerialization.HWRegisterState.BitFieldAccess.address"));
        } else
          goto handle_unusual;
        continue;
      // string bitfield = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bitfield();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeviceSerialization.HWRegisterState.BitFieldAccess.bitfield"));
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HWRegisterState_BitFieldAccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSerialization.HWRegisterState.BitFieldAccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceSerialization.HWRegisterState.BitFieldAccess.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string bitfield = 2;
  if (!this->_internal_bitfield().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bitfield().data(), static_cast<int>(this->_internal_bitfield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceSerialization.HWRegisterState.BitFieldAccess.bitfield");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bitfield(), target);
  }

  // uint32 value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSerialization.HWRegisterState.BitFieldAccess)
  return target;
}

size_t HWRegisterState_BitFieldAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSerialization.HWRegisterState.BitFieldAccess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string bitfield = 2;
  if (!this->_internal_bitfield().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bitfield());
  }

  // uint32 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HWRegisterState_BitFieldAccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HWRegisterState_BitFieldAccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HWRegisterState_BitFieldAccess::GetClassData() const { return &_class_data_; }


void HWRegisterState_BitFieldAccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HWRegisterState_BitFieldAccess*>(&to_msg);
  auto& from = static_cast<const HWRegisterState_BitFieldAccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceSerialization.HWRegisterState.BitFieldAccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_bitfield().empty()) {
    _this->_internal_set_bitfield(from._internal_bitfield());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HWRegisterState_BitFieldAccess::CopyFrom(const HWRegisterState_BitFieldAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSerialization.HWRegisterState.BitFieldAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWRegisterState_BitFieldAccess::IsInitialized() const {
  return true;
}

void HWRegisterState_BitFieldAccess::InternalSwap(HWRegisterState_BitFieldAccess* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bitfield_, lhs_arena,
      &other->_impl_.bitfield_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HWRegisterState_BitFieldAccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hw_5fregister_5fstate_2eproto_getter, &descriptor_table_hw_5fregister_5fstate_2eproto_once,
      file_level_metadata_hw_5fregister_5fstate_2eproto[2]);
}

// ===================================================================

class HWRegisterState::_Internal {
 public:
};

HWRegisterState::HWRegisterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceSerialization.HWRegisterState)
}
HWRegisterState::HWRegisterState(const HWRegisterState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HWRegisterState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_access_){from._impl_.num_access_}
    , decltype(_impl_.str_access_){from._impl_.str_access_}
    , decltype(_impl_.bitfield_access_){from._impl_.bitfield_access_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DeviceSerialization.HWRegisterState)
}

inline void HWRegisterState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_access_){arena}
    , decltype(_impl_.str_access_){arena}
    , decltype(_impl_.bitfield_access_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HWRegisterState::~HWRegisterState() {
  // @@protoc_insertion_point(destructor:DeviceSerialization.HWRegisterState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HWRegisterState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.num_access_.~RepeatedPtrField();
  _impl_.str_access_.~RepeatedPtrField();
  _impl_.bitfield_access_.~RepeatedPtrField();
}

void HWRegisterState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HWRegisterState::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSerialization.HWRegisterState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_access_.Clear();
  _impl_.str_access_.Clear();
  _impl_.bitfield_access_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HWRegisterState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DeviceSerialization.HWRegisterState.NumAccess num_access = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_num_access(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DeviceSerialization.HWRegisterState.StringAccess str_access = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_str_access(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DeviceSerialization.HWRegisterState.BitFieldAccess bitfield_access = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bitfield_access(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HWRegisterState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSerialization.HWRegisterState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DeviceSerialization.HWRegisterState.NumAccess num_access = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_num_access_size()); i < n; i++) {
    const auto& repfield = this->_internal_num_access(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DeviceSerialization.HWRegisterState.StringAccess str_access = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_str_access_size()); i < n; i++) {
    const auto& repfield = this->_internal_str_access(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .DeviceSerialization.HWRegisterState.BitFieldAccess bitfield_access = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bitfield_access_size()); i < n; i++) {
    const auto& repfield = this->_internal_bitfield_access(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSerialization.HWRegisterState)
  return target;
}

size_t HWRegisterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSerialization.HWRegisterState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeviceSerialization.HWRegisterState.NumAccess num_access = 1;
  total_size += 1UL * this->_internal_num_access_size();
  for (const auto& msg : this->_impl_.num_access_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DeviceSerialization.HWRegisterState.StringAccess str_access = 2;
  total_size += 1UL * this->_internal_str_access_size();
  for (const auto& msg : this->_impl_.str_access_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DeviceSerialization.HWRegisterState.BitFieldAccess bitfield_access = 3;
  total_size += 1UL * this->_internal_bitfield_access_size();
  for (const auto& msg : this->_impl_.bitfield_access_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HWRegisterState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HWRegisterState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HWRegisterState::GetClassData() const { return &_class_data_; }


void HWRegisterState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HWRegisterState*>(&to_msg);
  auto& from = static_cast<const HWRegisterState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceSerialization.HWRegisterState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.num_access_.MergeFrom(from._impl_.num_access_);
  _this->_impl_.str_access_.MergeFrom(from._impl_.str_access_);
  _this->_impl_.bitfield_access_.MergeFrom(from._impl_.bitfield_access_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HWRegisterState::CopyFrom(const HWRegisterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSerialization.HWRegisterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HWRegisterState::IsInitialized() const {
  return true;
}

void HWRegisterState::InternalSwap(HWRegisterState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.num_access_.InternalSwap(&other->_impl_.num_access_);
  _impl_.str_access_.InternalSwap(&other->_impl_.str_access_);
  _impl_.bitfield_access_.InternalSwap(&other->_impl_.bitfield_access_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HWRegisterState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hw_5fregister_5fstate_2eproto_getter, &descriptor_table_hw_5fregister_5fstate_2eproto_once,
      file_level_metadata_hw_5fregister_5fstate_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeviceSerialization::HWRegisterState_NumAccess*
Arena::CreateMaybeMessage< ::DeviceSerialization::HWRegisterState_NumAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceSerialization::HWRegisterState_NumAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceSerialization::HWRegisterState_StringAccess*
Arena::CreateMaybeMessage< ::DeviceSerialization::HWRegisterState_StringAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceSerialization::HWRegisterState_StringAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceSerialization::HWRegisterState_BitFieldAccess*
Arena::CreateMaybeMessage< ::DeviceSerialization::HWRegisterState_BitFieldAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceSerialization::HWRegisterState_BitFieldAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceSerialization::HWRegisterState*
Arena::CreateMaybeMessage< ::DeviceSerialization::HWRegisterState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceSerialization::HWRegisterState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
