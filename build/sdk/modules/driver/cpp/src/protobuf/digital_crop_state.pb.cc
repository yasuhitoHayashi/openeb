// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: digital_crop_state.proto

#include "digital_crop_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DeviceSerialization {
PROTOBUF_CONSTEXPR DigitalCropState_Region::DigitalCropState_Region(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x1_)*/0u
  , /*decltype(_impl_.y1_)*/0u
  , /*decltype(_impl_.x2_)*/0u
  , /*decltype(_impl_.y2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DigitalCropState_RegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalCropState_RegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalCropState_RegionDefaultTypeInternal() {}
  union {
    DigitalCropState_Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalCropState_RegionDefaultTypeInternal _DigitalCropState_Region_default_instance_;
PROTOBUF_CONSTEXPR DigitalCropState::DigitalCropState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/nullptr
  , /*decltype(_impl_.optional_enabled_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DigitalCropStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalCropStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalCropStateDefaultTypeInternal() {}
  union {
    DigitalCropState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalCropStateDefaultTypeInternal _DigitalCropState_default_instance_;
}  // namespace DeviceSerialization
static ::_pb::Metadata file_level_metadata_digital_5fcrop_5fstate_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_digital_5fcrop_5fstate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_digital_5fcrop_5fstate_2eproto = nullptr;

const uint32_t TableStruct_digital_5fcrop_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState_Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState_Region, _impl_.x1_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState_Region, _impl_.y1_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState_Region, _impl_.x2_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState_Region, _impl_.y2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::DeviceSerialization::DigitalCropState, _impl_.optional_enabled_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DeviceSerialization::DigitalCropState_Region)},
  { 10, -1, -1, sizeof(::DeviceSerialization::DigitalCropState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DeviceSerialization::_DigitalCropState_Region_default_instance_._instance,
  &::DeviceSerialization::_DigitalCropState_default_instance_._instance,
};

const char descriptor_table_protodef_digital_5fcrop_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030digital_crop_state.proto\022\023DeviceSerial"
  "ization\"\261\001\n\020DigitalCropState\022\021\n\007enabled\030"
  "\001 \001(\010H\000\022<\n\006region\030\002 \001(\0132,.DeviceSerializ"
  "ation.DigitalCropState.Region\0328\n\006Region\022"
  "\n\n\002X1\030\001 \001(\r\022\n\n\002Y1\030\002 \001(\r\022\n\n\002X2\030\003 \001(\r\022\n\n\002Y"
  "2\030\004 \001(\rB\022\n\020optional_enabledb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_digital_5fcrop_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_digital_5fcrop_5fstate_2eproto = {
    false, false, 235, descriptor_table_protodef_digital_5fcrop_5fstate_2eproto,
    "digital_crop_state.proto",
    &descriptor_table_digital_5fcrop_5fstate_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_digital_5fcrop_5fstate_2eproto::offsets,
    file_level_metadata_digital_5fcrop_5fstate_2eproto, file_level_enum_descriptors_digital_5fcrop_5fstate_2eproto,
    file_level_service_descriptors_digital_5fcrop_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_digital_5fcrop_5fstate_2eproto_getter() {
  return &descriptor_table_digital_5fcrop_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_digital_5fcrop_5fstate_2eproto(&descriptor_table_digital_5fcrop_5fstate_2eproto);
namespace DeviceSerialization {

// ===================================================================

class DigitalCropState_Region::_Internal {
 public:
};

DigitalCropState_Region::DigitalCropState_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceSerialization.DigitalCropState.Region)
}
DigitalCropState_Region::DigitalCropState_Region(const DigitalCropState_Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DigitalCropState_Region* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){}
    , decltype(_impl_.y1_){}
    , decltype(_impl_.x2_){}
    , decltype(_impl_.y2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x1_, &from._impl_.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y2_) -
    reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.y2_));
  // @@protoc_insertion_point(copy_constructor:DeviceSerialization.DigitalCropState.Region)
}

inline void DigitalCropState_Region::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){0u}
    , decltype(_impl_.y1_){0u}
    , decltype(_impl_.x2_){0u}
    , decltype(_impl_.y2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DigitalCropState_Region::~DigitalCropState_Region() {
  // @@protoc_insertion_point(destructor:DeviceSerialization.DigitalCropState.Region)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DigitalCropState_Region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigitalCropState_Region::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DigitalCropState_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSerialization.DigitalCropState.Region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y2_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.y2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalCropState_Region::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 X1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Y1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 X2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Y2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DigitalCropState_Region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSerialization.DigitalCropState.Region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 X1 = 1;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x1(), target);
  }

  // uint32 Y1 = 2;
  if (this->_internal_y1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y1(), target);
  }

  // uint32 X2 = 3;
  if (this->_internal_x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_x2(), target);
  }

  // uint32 Y2 = 4;
  if (this->_internal_y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_y2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSerialization.DigitalCropState.Region)
  return target;
}

size_t DigitalCropState_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSerialization.DigitalCropState.Region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 X1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x1());
  }

  // uint32 Y1 = 2;
  if (this->_internal_y1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y1());
  }

  // uint32 X2 = 3;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x2());
  }

  // uint32 Y2 = 4;
  if (this->_internal_y2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalCropState_Region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DigitalCropState_Region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalCropState_Region::GetClassData() const { return &_class_data_; }


void DigitalCropState_Region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DigitalCropState_Region*>(&to_msg);
  auto& from = static_cast<const DigitalCropState_Region&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceSerialization.DigitalCropState.Region)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_y1() != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_y2() != 0) {
    _this->_internal_set_y2(from._internal_y2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalCropState_Region::CopyFrom(const DigitalCropState_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSerialization.DigitalCropState.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalCropState_Region::IsInitialized() const {
  return true;
}

void DigitalCropState_Region::InternalSwap(DigitalCropState_Region* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalCropState_Region, _impl_.y2_)
      + sizeof(DigitalCropState_Region::_impl_.y2_)
      - PROTOBUF_FIELD_OFFSET(DigitalCropState_Region, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalCropState_Region::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_digital_5fcrop_5fstate_2eproto_getter, &descriptor_table_digital_5fcrop_5fstate_2eproto_once,
      file_level_metadata_digital_5fcrop_5fstate_2eproto[0]);
}

// ===================================================================

class DigitalCropState::_Internal {
 public:
  static const ::DeviceSerialization::DigitalCropState_Region& region(const DigitalCropState* msg);
};

const ::DeviceSerialization::DigitalCropState_Region&
DigitalCropState::_Internal::region(const DigitalCropState* msg) {
  return *msg->_impl_.region_;
}
DigitalCropState::DigitalCropState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeviceSerialization.DigitalCropState)
}
DigitalCropState::DigitalCropState(const DigitalCropState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DigitalCropState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){nullptr}
    , decltype(_impl_.optional_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region()) {
    _this->_impl_.region_ = new ::DeviceSerialization::DigitalCropState_Region(*from._impl_.region_);
  }
  clear_has_optional_enabled();
  switch (from.optional_enabled_case()) {
    case kEnabled: {
      _this->_internal_set_enabled(from._internal_enabled());
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DeviceSerialization.DigitalCropState)
}

inline void DigitalCropState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){nullptr}
    , decltype(_impl_.optional_enabled_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_enabled();
}

DigitalCropState::~DigitalCropState() {
  // @@protoc_insertion_point(destructor:DeviceSerialization.DigitalCropState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DigitalCropState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.region_;
  if (has_optional_enabled()) {
    clear_optional_enabled();
  }
}

void DigitalCropState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DigitalCropState::clear_optional_enabled() {
// @@protoc_insertion_point(one_of_clear_start:DeviceSerialization.DigitalCropState)
  switch (optional_enabled_case()) {
    case kEnabled: {
      // No need to clear
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}


void DigitalCropState::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceSerialization.DigitalCropState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.region_ != nullptr) {
    delete _impl_.region_;
  }
  _impl_.region_ = nullptr;
  clear_optional_enabled();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalCropState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DeviceSerialization.DigitalCropState.Region region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DigitalCropState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceSerialization.DigitalCropState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (_internal_has_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // .DeviceSerialization.DigitalCropState.Region region = 2;
  if (this->_internal_has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::region(this),
        _Internal::region(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceSerialization.DigitalCropState)
  return target;
}

size_t DigitalCropState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceSerialization.DigitalCropState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DeviceSerialization.DigitalCropState.Region region = 2;
  if (this->_internal_has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.region_);
  }

  switch (optional_enabled_case()) {
    // bool enabled = 1;
    case kEnabled: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalCropState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DigitalCropState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalCropState::GetClassData() const { return &_class_data_; }


void DigitalCropState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DigitalCropState*>(&to_msg);
  auto& from = static_cast<const DigitalCropState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeviceSerialization.DigitalCropState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_region()) {
    _this->_internal_mutable_region()->::DeviceSerialization::DigitalCropState_Region::MergeFrom(
        from._internal_region());
  }
  switch (from.optional_enabled_case()) {
    case kEnabled: {
      _this->_internal_set_enabled(from._internal_enabled());
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalCropState::CopyFrom(const DigitalCropState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceSerialization.DigitalCropState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalCropState::IsInitialized() const {
  return true;
}

void DigitalCropState::InternalSwap(DigitalCropState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.region_, other->_impl_.region_);
  swap(_impl_.optional_enabled_, other->_impl_.optional_enabled_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalCropState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_digital_5fcrop_5fstate_2eproto_getter, &descriptor_table_digital_5fcrop_5fstate_2eproto_once,
      file_level_metadata_digital_5fcrop_5fstate_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DeviceSerialization::DigitalCropState_Region*
Arena::CreateMaybeMessage< ::DeviceSerialization::DigitalCropState_Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceSerialization::DigitalCropState_Region >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceSerialization::DigitalCropState*
Arena::CreateMaybeMessage< ::DeviceSerialization::DigitalCropState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeviceSerialization::DigitalCropState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
