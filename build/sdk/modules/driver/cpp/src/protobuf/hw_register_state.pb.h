// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hw_register_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hw_5fregister_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hw_5fregister_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hw_5fregister_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hw_5fregister_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hw_5fregister_5fstate_2eproto;
namespace DeviceSerialization {
class HWRegisterState;
struct HWRegisterStateDefaultTypeInternal;
extern HWRegisterStateDefaultTypeInternal _HWRegisterState_default_instance_;
class HWRegisterState_BitFieldAccess;
struct HWRegisterState_BitFieldAccessDefaultTypeInternal;
extern HWRegisterState_BitFieldAccessDefaultTypeInternal _HWRegisterState_BitFieldAccess_default_instance_;
class HWRegisterState_NumAccess;
struct HWRegisterState_NumAccessDefaultTypeInternal;
extern HWRegisterState_NumAccessDefaultTypeInternal _HWRegisterState_NumAccess_default_instance_;
class HWRegisterState_StringAccess;
struct HWRegisterState_StringAccessDefaultTypeInternal;
extern HWRegisterState_StringAccessDefaultTypeInternal _HWRegisterState_StringAccess_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::HWRegisterState* Arena::CreateMaybeMessage<::DeviceSerialization::HWRegisterState>(Arena*);
template<> ::DeviceSerialization::HWRegisterState_BitFieldAccess* Arena::CreateMaybeMessage<::DeviceSerialization::HWRegisterState_BitFieldAccess>(Arena*);
template<> ::DeviceSerialization::HWRegisterState_NumAccess* Arena::CreateMaybeMessage<::DeviceSerialization::HWRegisterState_NumAccess>(Arena*);
template<> ::DeviceSerialization::HWRegisterState_StringAccess* Arena::CreateMaybeMessage<::DeviceSerialization::HWRegisterState_StringAccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

// ===================================================================

class HWRegisterState_NumAccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.HWRegisterState.NumAccess) */ {
 public:
  inline HWRegisterState_NumAccess() : HWRegisterState_NumAccess(nullptr) {}
  ~HWRegisterState_NumAccess() override;
  explicit PROTOBUF_CONSTEXPR HWRegisterState_NumAccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HWRegisterState_NumAccess(const HWRegisterState_NumAccess& from);
  HWRegisterState_NumAccess(HWRegisterState_NumAccess&& from) noexcept
    : HWRegisterState_NumAccess() {
    *this = ::std::move(from);
  }

  inline HWRegisterState_NumAccess& operator=(const HWRegisterState_NumAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline HWRegisterState_NumAccess& operator=(HWRegisterState_NumAccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HWRegisterState_NumAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const HWRegisterState_NumAccess* internal_default_instance() {
    return reinterpret_cast<const HWRegisterState_NumAccess*>(
               &_HWRegisterState_NumAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HWRegisterState_NumAccess& a, HWRegisterState_NumAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(HWRegisterState_NumAccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HWRegisterState_NumAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HWRegisterState_NumAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HWRegisterState_NumAccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HWRegisterState_NumAccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HWRegisterState_NumAccess& from) {
    HWRegisterState_NumAccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HWRegisterState_NumAccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.HWRegisterState.NumAccess";
  }
  protected:
  explicit HWRegisterState_NumAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint32 address = 1;
  void clear_address();
  uint32_t address() const;
  void set_address(uint32_t value);
  private:
  uint32_t _internal_address() const;
  void _internal_set_address(uint32_t value);
  public:

  // uint32 value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceSerialization.HWRegisterState.NumAccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t address_;
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hw_5fregister_5fstate_2eproto;
};
// -------------------------------------------------------------------

class HWRegisterState_StringAccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.HWRegisterState.StringAccess) */ {
 public:
  inline HWRegisterState_StringAccess() : HWRegisterState_StringAccess(nullptr) {}
  ~HWRegisterState_StringAccess() override;
  explicit PROTOBUF_CONSTEXPR HWRegisterState_StringAccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HWRegisterState_StringAccess(const HWRegisterState_StringAccess& from);
  HWRegisterState_StringAccess(HWRegisterState_StringAccess&& from) noexcept
    : HWRegisterState_StringAccess() {
    *this = ::std::move(from);
  }

  inline HWRegisterState_StringAccess& operator=(const HWRegisterState_StringAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline HWRegisterState_StringAccess& operator=(HWRegisterState_StringAccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HWRegisterState_StringAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const HWRegisterState_StringAccess* internal_default_instance() {
    return reinterpret_cast<const HWRegisterState_StringAccess*>(
               &_HWRegisterState_StringAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HWRegisterState_StringAccess& a, HWRegisterState_StringAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(HWRegisterState_StringAccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HWRegisterState_StringAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HWRegisterState_StringAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HWRegisterState_StringAccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HWRegisterState_StringAccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HWRegisterState_StringAccess& from) {
    HWRegisterState_StringAccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HWRegisterState_StringAccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.HWRegisterState.StringAccess";
  }
  protected:
  explicit HWRegisterState_StringAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceSerialization.HWRegisterState.StringAccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hw_5fregister_5fstate_2eproto;
};
// -------------------------------------------------------------------

class HWRegisterState_BitFieldAccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.HWRegisterState.BitFieldAccess) */ {
 public:
  inline HWRegisterState_BitFieldAccess() : HWRegisterState_BitFieldAccess(nullptr) {}
  ~HWRegisterState_BitFieldAccess() override;
  explicit PROTOBUF_CONSTEXPR HWRegisterState_BitFieldAccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HWRegisterState_BitFieldAccess(const HWRegisterState_BitFieldAccess& from);
  HWRegisterState_BitFieldAccess(HWRegisterState_BitFieldAccess&& from) noexcept
    : HWRegisterState_BitFieldAccess() {
    *this = ::std::move(from);
  }

  inline HWRegisterState_BitFieldAccess& operator=(const HWRegisterState_BitFieldAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline HWRegisterState_BitFieldAccess& operator=(HWRegisterState_BitFieldAccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HWRegisterState_BitFieldAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const HWRegisterState_BitFieldAccess* internal_default_instance() {
    return reinterpret_cast<const HWRegisterState_BitFieldAccess*>(
               &_HWRegisterState_BitFieldAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HWRegisterState_BitFieldAccess& a, HWRegisterState_BitFieldAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(HWRegisterState_BitFieldAccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HWRegisterState_BitFieldAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HWRegisterState_BitFieldAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HWRegisterState_BitFieldAccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HWRegisterState_BitFieldAccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HWRegisterState_BitFieldAccess& from) {
    HWRegisterState_BitFieldAccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HWRegisterState_BitFieldAccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.HWRegisterState.BitFieldAccess";
  }
  protected:
  explicit HWRegisterState_BitFieldAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kBitfieldFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string bitfield = 2;
  void clear_bitfield();
  const std::string& bitfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bitfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bitfield();
  PROTOBUF_NODISCARD std::string* release_bitfield();
  void set_allocated_bitfield(std::string* bitfield);
  private:
  const std::string& _internal_bitfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bitfield(const std::string& value);
  std::string* _internal_mutable_bitfield();
  public:

  // uint32 value = 3;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceSerialization.HWRegisterState.BitFieldAccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitfield_;
    uint32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hw_5fregister_5fstate_2eproto;
};
// -------------------------------------------------------------------

class HWRegisterState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.HWRegisterState) */ {
 public:
  inline HWRegisterState() : HWRegisterState(nullptr) {}
  ~HWRegisterState() override;
  explicit PROTOBUF_CONSTEXPR HWRegisterState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HWRegisterState(const HWRegisterState& from);
  HWRegisterState(HWRegisterState&& from) noexcept
    : HWRegisterState() {
    *this = ::std::move(from);
  }

  inline HWRegisterState& operator=(const HWRegisterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HWRegisterState& operator=(HWRegisterState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HWRegisterState& default_instance() {
    return *internal_default_instance();
  }
  static inline const HWRegisterState* internal_default_instance() {
    return reinterpret_cast<const HWRegisterState*>(
               &_HWRegisterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HWRegisterState& a, HWRegisterState& b) {
    a.Swap(&b);
  }
  inline void Swap(HWRegisterState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HWRegisterState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HWRegisterState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HWRegisterState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HWRegisterState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HWRegisterState& from) {
    HWRegisterState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HWRegisterState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.HWRegisterState";
  }
  protected:
  explicit HWRegisterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HWRegisterState_NumAccess NumAccess;
  typedef HWRegisterState_StringAccess StringAccess;
  typedef HWRegisterState_BitFieldAccess BitFieldAccess;

  // accessors -------------------------------------------------------

  enum : int {
    kNumAccessFieldNumber = 1,
    kStrAccessFieldNumber = 2,
    kBitfieldAccessFieldNumber = 3,
  };
  // repeated .DeviceSerialization.HWRegisterState.NumAccess num_access = 1;
  int num_access_size() const;
  private:
  int _internal_num_access_size() const;
  public:
  void clear_num_access();
  ::DeviceSerialization::HWRegisterState_NumAccess* mutable_num_access(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_NumAccess >*
      mutable_num_access();
  private:
  const ::DeviceSerialization::HWRegisterState_NumAccess& _internal_num_access(int index) const;
  ::DeviceSerialization::HWRegisterState_NumAccess* _internal_add_num_access();
  public:
  const ::DeviceSerialization::HWRegisterState_NumAccess& num_access(int index) const;
  ::DeviceSerialization::HWRegisterState_NumAccess* add_num_access();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_NumAccess >&
      num_access() const;

  // repeated .DeviceSerialization.HWRegisterState.StringAccess str_access = 2;
  int str_access_size() const;
  private:
  int _internal_str_access_size() const;
  public:
  void clear_str_access();
  ::DeviceSerialization::HWRegisterState_StringAccess* mutable_str_access(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_StringAccess >*
      mutable_str_access();
  private:
  const ::DeviceSerialization::HWRegisterState_StringAccess& _internal_str_access(int index) const;
  ::DeviceSerialization::HWRegisterState_StringAccess* _internal_add_str_access();
  public:
  const ::DeviceSerialization::HWRegisterState_StringAccess& str_access(int index) const;
  ::DeviceSerialization::HWRegisterState_StringAccess* add_str_access();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_StringAccess >&
      str_access() const;

  // repeated .DeviceSerialization.HWRegisterState.BitFieldAccess bitfield_access = 3;
  int bitfield_access_size() const;
  private:
  int _internal_bitfield_access_size() const;
  public:
  void clear_bitfield_access();
  ::DeviceSerialization::HWRegisterState_BitFieldAccess* mutable_bitfield_access(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_BitFieldAccess >*
      mutable_bitfield_access();
  private:
  const ::DeviceSerialization::HWRegisterState_BitFieldAccess& _internal_bitfield_access(int index) const;
  ::DeviceSerialization::HWRegisterState_BitFieldAccess* _internal_add_bitfield_access();
  public:
  const ::DeviceSerialization::HWRegisterState_BitFieldAccess& bitfield_access(int index) const;
  ::DeviceSerialization::HWRegisterState_BitFieldAccess* add_bitfield_access();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_BitFieldAccess >&
      bitfield_access() const;

  // @@protoc_insertion_point(class_scope:DeviceSerialization.HWRegisterState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_NumAccess > num_access_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_StringAccess > str_access_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_BitFieldAccess > bitfield_access_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hw_5fregister_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HWRegisterState_NumAccess

// uint32 address = 1;
inline void HWRegisterState_NumAccess::clear_address() {
  _impl_.address_ = 0u;
}
inline uint32_t HWRegisterState_NumAccess::_internal_address() const {
  return _impl_.address_;
}
inline uint32_t HWRegisterState_NumAccess::address() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.NumAccess.address)
  return _internal_address();
}
inline void HWRegisterState_NumAccess::_internal_set_address(uint32_t value) {
  
  _impl_.address_ = value;
}
inline void HWRegisterState_NumAccess::set_address(uint32_t value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.HWRegisterState.NumAccess.address)
}

// uint32 value = 2;
inline void HWRegisterState_NumAccess::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t HWRegisterState_NumAccess::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t HWRegisterState_NumAccess::value() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.NumAccess.value)
  return _internal_value();
}
inline void HWRegisterState_NumAccess::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void HWRegisterState_NumAccess::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.HWRegisterState.NumAccess.value)
}

// -------------------------------------------------------------------

// HWRegisterState_StringAccess

// string address = 1;
inline void HWRegisterState_StringAccess::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& HWRegisterState_StringAccess::address() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.StringAccess.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HWRegisterState_StringAccess::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceSerialization.HWRegisterState.StringAccess.address)
}
inline std::string* HWRegisterState_StringAccess::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.HWRegisterState.StringAccess.address)
  return _s;
}
inline const std::string& HWRegisterState_StringAccess::_internal_address() const {
  return _impl_.address_.Get();
}
inline void HWRegisterState_StringAccess::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* HWRegisterState_StringAccess::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* HWRegisterState_StringAccess::release_address() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.HWRegisterState.StringAccess.address)
  return _impl_.address_.Release();
}
inline void HWRegisterState_StringAccess::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.HWRegisterState.StringAccess.address)
}

// uint32 value = 2;
inline void HWRegisterState_StringAccess::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t HWRegisterState_StringAccess::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t HWRegisterState_StringAccess::value() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.StringAccess.value)
  return _internal_value();
}
inline void HWRegisterState_StringAccess::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void HWRegisterState_StringAccess::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.HWRegisterState.StringAccess.value)
}

// -------------------------------------------------------------------

// HWRegisterState_BitFieldAccess

// string address = 1;
inline void HWRegisterState_BitFieldAccess::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& HWRegisterState_BitFieldAccess::address() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.BitFieldAccess.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HWRegisterState_BitFieldAccess::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceSerialization.HWRegisterState.BitFieldAccess.address)
}
inline std::string* HWRegisterState_BitFieldAccess::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.HWRegisterState.BitFieldAccess.address)
  return _s;
}
inline const std::string& HWRegisterState_BitFieldAccess::_internal_address() const {
  return _impl_.address_.Get();
}
inline void HWRegisterState_BitFieldAccess::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* HWRegisterState_BitFieldAccess::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* HWRegisterState_BitFieldAccess::release_address() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.HWRegisterState.BitFieldAccess.address)
  return _impl_.address_.Release();
}
inline void HWRegisterState_BitFieldAccess::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.HWRegisterState.BitFieldAccess.address)
}

// string bitfield = 2;
inline void HWRegisterState_BitFieldAccess::clear_bitfield() {
  _impl_.bitfield_.ClearToEmpty();
}
inline const std::string& HWRegisterState_BitFieldAccess::bitfield() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.BitFieldAccess.bitfield)
  return _internal_bitfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HWRegisterState_BitFieldAccess::set_bitfield(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bitfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DeviceSerialization.HWRegisterState.BitFieldAccess.bitfield)
}
inline std::string* HWRegisterState_BitFieldAccess::mutable_bitfield() {
  std::string* _s = _internal_mutable_bitfield();
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.HWRegisterState.BitFieldAccess.bitfield)
  return _s;
}
inline const std::string& HWRegisterState_BitFieldAccess::_internal_bitfield() const {
  return _impl_.bitfield_.Get();
}
inline void HWRegisterState_BitFieldAccess::_internal_set_bitfield(const std::string& value) {
  
  _impl_.bitfield_.Set(value, GetArenaForAllocation());
}
inline std::string* HWRegisterState_BitFieldAccess::_internal_mutable_bitfield() {
  
  return _impl_.bitfield_.Mutable(GetArenaForAllocation());
}
inline std::string* HWRegisterState_BitFieldAccess::release_bitfield() {
  // @@protoc_insertion_point(field_release:DeviceSerialization.HWRegisterState.BitFieldAccess.bitfield)
  return _impl_.bitfield_.Release();
}
inline void HWRegisterState_BitFieldAccess::set_allocated_bitfield(std::string* bitfield) {
  if (bitfield != nullptr) {
    
  } else {
    
  }
  _impl_.bitfield_.SetAllocated(bitfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bitfield_.IsDefault()) {
    _impl_.bitfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DeviceSerialization.HWRegisterState.BitFieldAccess.bitfield)
}

// uint32 value = 3;
inline void HWRegisterState_BitFieldAccess::clear_value() {
  _impl_.value_ = 0u;
}
inline uint32_t HWRegisterState_BitFieldAccess::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t HWRegisterState_BitFieldAccess::value() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.BitFieldAccess.value)
  return _internal_value();
}
inline void HWRegisterState_BitFieldAccess::_internal_set_value(uint32_t value) {
  
  _impl_.value_ = value;
}
inline void HWRegisterState_BitFieldAccess::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.HWRegisterState.BitFieldAccess.value)
}

// -------------------------------------------------------------------

// HWRegisterState

// repeated .DeviceSerialization.HWRegisterState.NumAccess num_access = 1;
inline int HWRegisterState::_internal_num_access_size() const {
  return _impl_.num_access_.size();
}
inline int HWRegisterState::num_access_size() const {
  return _internal_num_access_size();
}
inline void HWRegisterState::clear_num_access() {
  _impl_.num_access_.Clear();
}
inline ::DeviceSerialization::HWRegisterState_NumAccess* HWRegisterState::mutable_num_access(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.HWRegisterState.num_access)
  return _impl_.num_access_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_NumAccess >*
HWRegisterState::mutable_num_access() {
  // @@protoc_insertion_point(field_mutable_list:DeviceSerialization.HWRegisterState.num_access)
  return &_impl_.num_access_;
}
inline const ::DeviceSerialization::HWRegisterState_NumAccess& HWRegisterState::_internal_num_access(int index) const {
  return _impl_.num_access_.Get(index);
}
inline const ::DeviceSerialization::HWRegisterState_NumAccess& HWRegisterState::num_access(int index) const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.num_access)
  return _internal_num_access(index);
}
inline ::DeviceSerialization::HWRegisterState_NumAccess* HWRegisterState::_internal_add_num_access() {
  return _impl_.num_access_.Add();
}
inline ::DeviceSerialization::HWRegisterState_NumAccess* HWRegisterState::add_num_access() {
  ::DeviceSerialization::HWRegisterState_NumAccess* _add = _internal_add_num_access();
  // @@protoc_insertion_point(field_add:DeviceSerialization.HWRegisterState.num_access)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_NumAccess >&
HWRegisterState::num_access() const {
  // @@protoc_insertion_point(field_list:DeviceSerialization.HWRegisterState.num_access)
  return _impl_.num_access_;
}

// repeated .DeviceSerialization.HWRegisterState.StringAccess str_access = 2;
inline int HWRegisterState::_internal_str_access_size() const {
  return _impl_.str_access_.size();
}
inline int HWRegisterState::str_access_size() const {
  return _internal_str_access_size();
}
inline void HWRegisterState::clear_str_access() {
  _impl_.str_access_.Clear();
}
inline ::DeviceSerialization::HWRegisterState_StringAccess* HWRegisterState::mutable_str_access(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.HWRegisterState.str_access)
  return _impl_.str_access_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_StringAccess >*
HWRegisterState::mutable_str_access() {
  // @@protoc_insertion_point(field_mutable_list:DeviceSerialization.HWRegisterState.str_access)
  return &_impl_.str_access_;
}
inline const ::DeviceSerialization::HWRegisterState_StringAccess& HWRegisterState::_internal_str_access(int index) const {
  return _impl_.str_access_.Get(index);
}
inline const ::DeviceSerialization::HWRegisterState_StringAccess& HWRegisterState::str_access(int index) const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.str_access)
  return _internal_str_access(index);
}
inline ::DeviceSerialization::HWRegisterState_StringAccess* HWRegisterState::_internal_add_str_access() {
  return _impl_.str_access_.Add();
}
inline ::DeviceSerialization::HWRegisterState_StringAccess* HWRegisterState::add_str_access() {
  ::DeviceSerialization::HWRegisterState_StringAccess* _add = _internal_add_str_access();
  // @@protoc_insertion_point(field_add:DeviceSerialization.HWRegisterState.str_access)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_StringAccess >&
HWRegisterState::str_access() const {
  // @@protoc_insertion_point(field_list:DeviceSerialization.HWRegisterState.str_access)
  return _impl_.str_access_;
}

// repeated .DeviceSerialization.HWRegisterState.BitFieldAccess bitfield_access = 3;
inline int HWRegisterState::_internal_bitfield_access_size() const {
  return _impl_.bitfield_access_.size();
}
inline int HWRegisterState::bitfield_access_size() const {
  return _internal_bitfield_access_size();
}
inline void HWRegisterState::clear_bitfield_access() {
  _impl_.bitfield_access_.Clear();
}
inline ::DeviceSerialization::HWRegisterState_BitFieldAccess* HWRegisterState::mutable_bitfield_access(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.HWRegisterState.bitfield_access)
  return _impl_.bitfield_access_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_BitFieldAccess >*
HWRegisterState::mutable_bitfield_access() {
  // @@protoc_insertion_point(field_mutable_list:DeviceSerialization.HWRegisterState.bitfield_access)
  return &_impl_.bitfield_access_;
}
inline const ::DeviceSerialization::HWRegisterState_BitFieldAccess& HWRegisterState::_internal_bitfield_access(int index) const {
  return _impl_.bitfield_access_.Get(index);
}
inline const ::DeviceSerialization::HWRegisterState_BitFieldAccess& HWRegisterState::bitfield_access(int index) const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.HWRegisterState.bitfield_access)
  return _internal_bitfield_access(index);
}
inline ::DeviceSerialization::HWRegisterState_BitFieldAccess* HWRegisterState::_internal_add_bitfield_access() {
  return _impl_.bitfield_access_.Add();
}
inline ::DeviceSerialization::HWRegisterState_BitFieldAccess* HWRegisterState::add_bitfield_access() {
  ::DeviceSerialization::HWRegisterState_BitFieldAccess* _add = _internal_add_bitfield_access();
  // @@protoc_insertion_point(field_add:DeviceSerialization.HWRegisterState.bitfield_access)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::HWRegisterState_BitFieldAccess >&
HWRegisterState::bitfield_access() const {
  // @@protoc_insertion_point(field_list:DeviceSerialization.HWRegisterState.bitfield_access)
  return _impl_.bitfield_access_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hw_5fregister_5fstate_2eproto
