// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: digital_event_mask_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_digital_5fevent_5fmask_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_digital_5fevent_5fmask_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_digital_5fevent_5fmask_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_digital_5fevent_5fmask_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_digital_5fevent_5fmask_5fstate_2eproto;
namespace DeviceSerialization {
class DigitalEventMaskState;
struct DigitalEventMaskStateDefaultTypeInternal;
extern DigitalEventMaskStateDefaultTypeInternal _DigitalEventMaskState_default_instance_;
class DigitalEventMaskState_PixelMask;
struct DigitalEventMaskState_PixelMaskDefaultTypeInternal;
extern DigitalEventMaskState_PixelMaskDefaultTypeInternal _DigitalEventMaskState_PixelMask_default_instance_;
}  // namespace DeviceSerialization
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceSerialization::DigitalEventMaskState* Arena::CreateMaybeMessage<::DeviceSerialization::DigitalEventMaskState>(Arena*);
template<> ::DeviceSerialization::DigitalEventMaskState_PixelMask* Arena::CreateMaybeMessage<::DeviceSerialization::DigitalEventMaskState_PixelMask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DeviceSerialization {

// ===================================================================

class DigitalEventMaskState_PixelMask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.DigitalEventMaskState.PixelMask) */ {
 public:
  inline DigitalEventMaskState_PixelMask() : DigitalEventMaskState_PixelMask(nullptr) {}
  ~DigitalEventMaskState_PixelMask() override;
  explicit PROTOBUF_CONSTEXPR DigitalEventMaskState_PixelMask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalEventMaskState_PixelMask(const DigitalEventMaskState_PixelMask& from);
  DigitalEventMaskState_PixelMask(DigitalEventMaskState_PixelMask&& from) noexcept
    : DigitalEventMaskState_PixelMask() {
    *this = ::std::move(from);
  }

  inline DigitalEventMaskState_PixelMask& operator=(const DigitalEventMaskState_PixelMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalEventMaskState_PixelMask& operator=(DigitalEventMaskState_PixelMask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalEventMaskState_PixelMask& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalEventMaskState_PixelMask* internal_default_instance() {
    return reinterpret_cast<const DigitalEventMaskState_PixelMask*>(
               &_DigitalEventMaskState_PixelMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DigitalEventMaskState_PixelMask& a, DigitalEventMaskState_PixelMask& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalEventMaskState_PixelMask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalEventMaskState_PixelMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalEventMaskState_PixelMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalEventMaskState_PixelMask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalEventMaskState_PixelMask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigitalEventMaskState_PixelMask& from) {
    DigitalEventMaskState_PixelMask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalEventMaskState_PixelMask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.DigitalEventMaskState.PixelMask";
  }
  protected:
  explicit DigitalEventMaskState_PixelMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kEnabledFieldNumber = 3,
  };
  // uint32 x = 1;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 2;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // bool enabled = 3;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DeviceSerialization.DigitalEventMaskState.PixelMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t x_;
    uint32_t y_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_digital_5fevent_5fmask_5fstate_2eproto;
};
// -------------------------------------------------------------------

class DigitalEventMaskState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceSerialization.DigitalEventMaskState) */ {
 public:
  inline DigitalEventMaskState() : DigitalEventMaskState(nullptr) {}
  ~DigitalEventMaskState() override;
  explicit PROTOBUF_CONSTEXPR DigitalEventMaskState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalEventMaskState(const DigitalEventMaskState& from);
  DigitalEventMaskState(DigitalEventMaskState&& from) noexcept
    : DigitalEventMaskState() {
    *this = ::std::move(from);
  }

  inline DigitalEventMaskState& operator=(const DigitalEventMaskState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalEventMaskState& operator=(DigitalEventMaskState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalEventMaskState& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalEventMaskState* internal_default_instance() {
    return reinterpret_cast<const DigitalEventMaskState*>(
               &_DigitalEventMaskState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DigitalEventMaskState& a, DigitalEventMaskState& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalEventMaskState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalEventMaskState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalEventMaskState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalEventMaskState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalEventMaskState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DigitalEventMaskState& from) {
    DigitalEventMaskState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalEventMaskState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceSerialization.DigitalEventMaskState";
  }
  protected:
  explicit DigitalEventMaskState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DigitalEventMaskState_PixelMask PixelMask;

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
  };
  // repeated .DeviceSerialization.DigitalEventMaskState.PixelMask mask = 1;
  int mask_size() const;
  private:
  int _internal_mask_size() const;
  public:
  void clear_mask();
  ::DeviceSerialization::DigitalEventMaskState_PixelMask* mutable_mask(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::DigitalEventMaskState_PixelMask >*
      mutable_mask();
  private:
  const ::DeviceSerialization::DigitalEventMaskState_PixelMask& _internal_mask(int index) const;
  ::DeviceSerialization::DigitalEventMaskState_PixelMask* _internal_add_mask();
  public:
  const ::DeviceSerialization::DigitalEventMaskState_PixelMask& mask(int index) const;
  ::DeviceSerialization::DigitalEventMaskState_PixelMask* add_mask();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::DigitalEventMaskState_PixelMask >&
      mask() const;

  // @@protoc_insertion_point(class_scope:DeviceSerialization.DigitalEventMaskState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::DigitalEventMaskState_PixelMask > mask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_digital_5fevent_5fmask_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DigitalEventMaskState_PixelMask

// uint32 x = 1;
inline void DigitalEventMaskState_PixelMask::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t DigitalEventMaskState_PixelMask::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t DigitalEventMaskState_PixelMask::x() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalEventMaskState.PixelMask.x)
  return _internal_x();
}
inline void DigitalEventMaskState_PixelMask::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void DigitalEventMaskState_PixelMask::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalEventMaskState.PixelMask.x)
}

// uint32 y = 2;
inline void DigitalEventMaskState_PixelMask::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t DigitalEventMaskState_PixelMask::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t DigitalEventMaskState_PixelMask::y() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalEventMaskState.PixelMask.y)
  return _internal_y();
}
inline void DigitalEventMaskState_PixelMask::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void DigitalEventMaskState_PixelMask::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalEventMaskState.PixelMask.y)
}

// bool enabled = 3;
inline void DigitalEventMaskState_PixelMask::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool DigitalEventMaskState_PixelMask::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool DigitalEventMaskState_PixelMask::enabled() const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalEventMaskState.PixelMask.enabled)
  return _internal_enabled();
}
inline void DigitalEventMaskState_PixelMask::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void DigitalEventMaskState_PixelMask::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:DeviceSerialization.DigitalEventMaskState.PixelMask.enabled)
}

// -------------------------------------------------------------------

// DigitalEventMaskState

// repeated .DeviceSerialization.DigitalEventMaskState.PixelMask mask = 1;
inline int DigitalEventMaskState::_internal_mask_size() const {
  return _impl_.mask_.size();
}
inline int DigitalEventMaskState::mask_size() const {
  return _internal_mask_size();
}
inline void DigitalEventMaskState::clear_mask() {
  _impl_.mask_.Clear();
}
inline ::DeviceSerialization::DigitalEventMaskState_PixelMask* DigitalEventMaskState::mutable_mask(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceSerialization.DigitalEventMaskState.mask)
  return _impl_.mask_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::DigitalEventMaskState_PixelMask >*
DigitalEventMaskState::mutable_mask() {
  // @@protoc_insertion_point(field_mutable_list:DeviceSerialization.DigitalEventMaskState.mask)
  return &_impl_.mask_;
}
inline const ::DeviceSerialization::DigitalEventMaskState_PixelMask& DigitalEventMaskState::_internal_mask(int index) const {
  return _impl_.mask_.Get(index);
}
inline const ::DeviceSerialization::DigitalEventMaskState_PixelMask& DigitalEventMaskState::mask(int index) const {
  // @@protoc_insertion_point(field_get:DeviceSerialization.DigitalEventMaskState.mask)
  return _internal_mask(index);
}
inline ::DeviceSerialization::DigitalEventMaskState_PixelMask* DigitalEventMaskState::_internal_add_mask() {
  return _impl_.mask_.Add();
}
inline ::DeviceSerialization::DigitalEventMaskState_PixelMask* DigitalEventMaskState::add_mask() {
  ::DeviceSerialization::DigitalEventMaskState_PixelMask* _add = _internal_add_mask();
  // @@protoc_insertion_point(field_add:DeviceSerialization.DigitalEventMaskState.mask)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DeviceSerialization::DigitalEventMaskState_PixelMask >&
DigitalEventMaskState::mask() const {
  // @@protoc_insertion_point(field_list:DeviceSerialization.DigitalEventMaskState.mask)
  return _impl_.mask_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeviceSerialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_digital_5fevent_5fmask_5fstate_2eproto
